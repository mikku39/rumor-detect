{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Rumor Detect Docs","text":"<p>\u8fd9\u91cc\u662f\u6768\u5f00\u5f00\u7684ysu\u6bd5\u4e1a\u8bbe\u8ba1\u9879\u76ee\u2014\u2014\u5fae\u535a\u8c23\u8a00\u68c0\u6d4b\u7684\u6587\u6863\u3002 \u5c06\u4f1a\u5305\u542b\u6559\u7a0b\u548cAPI\u6587\u6863</p>"},{"location":"#_1","title":"\u5b89\u88c5\u6559\u7a0b","text":"<pre><code>git clone https://github.com/mikku39/rumor-detect.git\ncd rumor-detect\nsudo pip install .\n</code></pre>"},{"location":"#_2","title":"\u5feb\u901f\u542f\u52a8","text":"<pre><code>from RumorDetect.RumorDetect import rumor_detect\n\ninstance = rumor_detect()\nsent = \"\u8fd9\u662f\u8c23\u8a00\u5417\"\ninstance.run(sent)\n</code></pre>"},{"location":"reference/compare/","title":"\u6587\u672c\u5bf9\u6bd4","text":""},{"location":"reference/compare/#_1","title":"\u65b0\u95fb\u6587\u672c\u6bd4\u8f83\u6a21\u5757","text":""},{"location":"reference/compare/#_2","title":"\u57fa\u7c7b","text":"<p>\u8fd9\u662f\u65b0\u95fb\u6587\u672c\u6bd4\u8f83\u6a21\u5757\u7684\u57fa\u7c7b\u3002\u7528\u6237\u9700\u8981\u57fa\u4e8e\u8be5\u57fa\u7c7b\u5b9e\u73b0\u81ea\u5df1\u7684\u6587\u672c\u6bd4\u8f83\u6a21\u5757\u3002 \u8be5\u7c7b\u7684\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a 1. init() -&gt; None: \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u578b\u3002 2. compare(self, sent : str, news_list:List[Tuple]) -&gt; List[Dict]</p> Source code in <code>RumorDetect/model.py</code> <pre><code>class BaseCompareModel:\n    \"\"\"\n    \u8fd9\u662f\u65b0\u95fb\u6587\u672c\u6bd4\u8f83\u6a21\u5757\u7684\u57fa\u7c7b\u3002\u7528\u6237\u9700\u8981\u57fa\u4e8e\u8be5\u57fa\u7c7b\u5b9e\u73b0\u81ea\u5df1\u7684\u6587\u672c\u6bd4\u8f83\u6a21\u5757\u3002\n    \u8be5\u7c7b\u7684\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a\n    1. **init()** -&gt; None: \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u578b\u3002\n    2. **compare**(self, sent : str, news_list:List[Tuple]) -&gt; List[Dict]\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        raise NotImplementedError()\n\n    def compare(self, sent: str, news_list: List[Tuple]) -&gt; List[Dict]:\n        \"\"\"\n        \u8be5\u65b9\u6cd5\u7528\u4e8e\u65b0\u95fb\u6587\u672c\u6bd4\u8f83\u3002\n\n        Args:\n            sent: \u5fae\u535a\u6587\u672c\n            news_list: \u65b0\u95fb\u5217\u8868\n\n        Returns:\n            \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\u3002[{\"source\":\u539f\u5fae\u535a\u6587\u672c,\"news\": \u65b0\u95fb,\"news_url\": \u65b0\u95fburl,\"score\" :\u7f6e\u4fe1\u5ea6\uff0c\u8d8a\u5927\u8d8a\u4e0d\u662f\u8c23\u8a00,\"predict\"\uff1a\u662f\u5426\u662f\u8c23\u8a00}]\n        \"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"reference/compare/#RumorDetect.model.BaseCompareModel.compare","title":"<code>compare(sent, news_list)</code>","text":"<p>\u8be5\u65b9\u6cd5\u7528\u4e8e\u65b0\u95fb\u6587\u672c\u6bd4\u8f83\u3002</p> <p>Parameters:</p> Name Type Description Default <code>sent</code> <code>str</code> <p>\u5fae\u535a\u6587\u672c</p> required <code>news_list</code> <code>List[Tuple]</code> <p>\u65b0\u95fb\u5217\u8868</p> required <p>Returns:</p> Type Description <code>List[Dict]</code> <p>\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\u3002[{\"source\":\u539f\u5fae\u535a\u6587\u672c,\"news\": \u65b0\u95fb,\"news_url\": \u65b0\u95fburl,\"score\" :\u7f6e\u4fe1\u5ea6\uff0c\u8d8a\u5927\u8d8a\u4e0d\u662f\u8c23\u8a00,\"predict\"\uff1a\u662f\u5426\u662f\u8c23\u8a00}]</p> Source code in <code>RumorDetect/model.py</code> <pre><code>def compare(self, sent: str, news_list: List[Tuple]) -&gt; List[Dict]:\n    \"\"\"\n    \u8be5\u65b9\u6cd5\u7528\u4e8e\u65b0\u95fb\u6587\u672c\u6bd4\u8f83\u3002\n\n    Args:\n        sent: \u5fae\u535a\u6587\u672c\n        news_list: \u65b0\u95fb\u5217\u8868\n\n    Returns:\n        \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\u3002[{\"source\":\u539f\u5fae\u535a\u6587\u672c,\"news\": \u65b0\u95fb,\"news_url\": \u65b0\u95fburl,\"score\" :\u7f6e\u4fe1\u5ea6\uff0c\u8d8a\u5927\u8d8a\u4e0d\u662f\u8c23\u8a00,\"predict\"\uff1a\u662f\u5426\u662f\u8c23\u8a00}]\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"reference/compare/#_3","title":"\u9ed8\u8ba4\u63d0\u4f9b\u7684\u4e00\u4e9b\u6d3e\u751f\u7c7b","text":""},{"location":"reference/compare/#erine-gram","title":"\u4f7f\u7528 Erine-gram \u6a21\u578b\u505a\u8bed\u4e49\u5339\u914d","text":"<p>               Bases: <code>BaseCompareModel</code></p> <p>\u4f7f\u7528 Ernie-gram \u6a21\u578b\u914d\u5408 Pointwise\u5339\u914d\u8fdb\u884c\u6587\u672c\u6bd4\u8f83 \u6bd4\u8f83\u4e24\u4e2a\u6587\u672c\u7684\u8bed\u4e49\u662f\u5426\u76f8\u540c\u3002 \u7531\u4e8e\u8c23\u8a00\u68c0\u6d4b\u66f4\u591a\u7684\u60c5\u51b5\u4e0b\u662f\u5bf9\u6bd4\u5fae\u535a\u6587\u672c\u662f\u5426\u662f\u65b0\u95fb\u6587\u672c\u7684\u5b50\u96c6\u3002 \u56e0\u6b64\u6982\u8ff0\u4e0b\u6765\uff0c\u65b0\u95fb\u6587\u672c\u5305\u542b\u5fae\u535a\u6587\u672c\u7684\u60c5\u51b5\u4e0b\uff0c\u4e24\u8005\u8bed\u4e49\u4e0d\u4e00\u5b9a\u80fd\u591f\u76f8\u4f3c \u6240\u4ee5\u51c6\u786e\u7387\u53ef\u80fd\u4e0d\u9ad8\u3002</p> Source code in <code>RumorDetect/modules/compare_module.py</code> <pre><code>class MatchingCompareModel(BaseCompareModel):\n    '''\n        \u4f7f\u7528 Ernie-gram \u6a21\u578b\u914d\u5408 Pointwise\u5339\u914d\u8fdb\u884c\u6587\u672c\u6bd4\u8f83\n        \u6bd4\u8f83\u4e24\u4e2a\u6587\u672c\u7684\u8bed\u4e49\u662f\u5426\u76f8\u540c\u3002\n        \u7531\u4e8e\u8c23\u8a00\u68c0\u6d4b\u66f4\u591a\u7684\u60c5\u51b5\u4e0b\u662f\u5bf9\u6bd4\u5fae\u535a\u6587\u672c\u662f\u5426\u662f\u65b0\u95fb\u6587\u672c\u7684\u5b50\u96c6\u3002\n        \u56e0\u6b64\u6982\u8ff0\u4e0b\u6765\uff0c\u65b0\u95fb\u6587\u672c\u5305\u542b\u5fae\u535a\u6587\u672c\u7684\u60c5\u51b5\u4e0b\uff0c\u4e24\u8005\u8bed\u4e49\u4e0d\u4e00\u5b9a\u80fd\u591f\u76f8\u4f3c\n        \u6240\u4ee5\u51c6\u786e\u7387\u53ef\u80fd\u4e0d\u9ad8\u3002\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        pretrained_model = paddlenlp.transformers.ErnieGramModel.from_pretrained(\n            \"ernie-gram-zh\"\n        )\n        self.compare_model = PointwiseMatching(pretrained_model)\n        model_path = f\"{get_default_path()}/point_wise.pdparams\"\n        url = \"https://github.com/mikku39/rumor-detect/releases/download/v0.0.1/point_wise.pdparams\"\n        check_and_download(model_path, url)\n        state_dict = paddle.load(model_path)\n        self.compare_model.set_dict(state_dict)\n\n    def compare(self, sent: str, news_list: List[Tuple]) -&gt; List[Dict]:\n        inv_label_map = {0: \"\u8c23\u8a00\", 1: \"\u975e\u8c23\u8a00\"}\n        match_tokenizer = paddlenlp.transformers.ErnieGramTokenizer.from_pretrained(\n            \"ernie-gram-zh\"\n        )\n        # \u9884\u6d4b\u6570\u636e\u7684\u8f6c\u6362\u51fd\u6570\n        trans_func = partial(\n            convert_example,\n            tokenizer=match_tokenizer,\n            max_seq_length=512,\n            is_test=True,\n        )\n\n        # \u9884\u6d4b\u6570\u636e\u7684\u7ec4 batch \u64cd\u4f5c\n        # predict \u6570\u636e\u53ea\u8fd4\u56de input_ids \u548c token_type_ids\uff0c\u56e0\u6b64\u53ea\u9700\u8981 2 \u4e2a Pad \u5bf9\u8c61\u4f5c\u4e3a batchify_fn\n        batchify_fn = lambda samples, fn=Tuple(\n            Pad(axis=0, pad_val=match_tokenizer.pad_token_id),  # input_ids\n            Pad(axis=0, pad_val=match_tokenizer.pad_token_type_id),  # segment_ids\n        ): [data for data in fn(samples)]\n\n        data_source = generate_data_source(sent, news_list)\n        test_ds = MapDataset(data_source)\n        batch_sampler = paddle.io.BatchSampler(test_ds, batch_size=32, shuffle=False)\n        # \u751f\u6210\u9884\u6d4b\u6570\u636e data_loader\n        predict_data_loader = paddle.io.DataLoader(\n            dataset=test_ds.map(trans_func),\n            batch_sampler=batch_sampler,\n            collate_fn=batchify_fn,\n            return_list=True,\n        )\n        # \u6267\u884c\u9884\u6d4b\u51fd\u6570\n        y_probs = self.match_infer(self.compare_model, predict_data_loader)\n        y_preds = np.argmax(y_probs, axis=1)\n        test_ds = MapDataset(data_source)\n        result_list = []\n        for idx, y_pred in enumerate(y_preds):\n            result_list.append(\n                {\n                    \"source\": test_ds[idx][\"query\"],\n                    \"news\": test_ds[idx][\"title\"],\n                    \"news_url\": news_list[idx][1],\n                    \"score\": y_probs[idx][1],\n                    \"predict\": inv_label_map[y_pred],\n                }\n            )\n        # print(tabulate.tabulate(result_list, headers=\"keys\", tablefmt=\"grid\"))\n        return result_list\n\n    def match_infer(self, model, data_loader):\n\n        batch_probs = []\n\n        # \u9884\u6d4b\u9636\u6bb5\u6253\u5f00 eval \u6a21\u5f0f\uff0c\u6a21\u578b\u4e2d\u7684 dropout \u7b49\u64cd\u4f5c\u4f1a\u5173\u6389\n        model.eval()\n\n        with paddle.no_grad():\n            for batch_data in data_loader:\n                input_ids, token_type_ids = batch_data\n                input_ids = paddle.to_tensor(input_ids)\n                token_type_ids = paddle.to_tensor(token_type_ids)\n\n                # \u83b7\u53d6\u6bcf\u4e2a\u6837\u672c\u7684\u9884\u6d4b\u6982\u7387: [batch_size, 2] \u7684\u77e9\u9635\n                batch_prob = model(\n                    input_ids=input_ids, token_type_ids=token_type_ids\n                ).numpy()\n\n                batch_probs.append(batch_prob)\n            batch_probs = np.concatenate(batch_probs, axis=0)\n\n            return batch_probs\n</code></pre>"},{"location":"reference/compare/#bert","title":"\u4f7f\u7528 Bert \u6a21\u578b\u505a\u8bed\u4e49\u8574\u542b","text":"<p>               Bases: <code>BaseCompareModel</code></p> <p>\u4f7f\u7528 Bert \u6a21\u578b\u8fdb\u884c\u6587\u672c\u6bd4\u8f83 \u8fd9\u91cc\u4e3b\u8981\u662f\u8bad\u7ec3\u4e86\u6587\u672c\u7684\u8574\u542b\u5173\u7cfb\u3002\u56e0\u6b64\u6211\u4eec\u6bd4\u8f83\u65b0\u95fb\u6587\u672c\u662f\u5426\u8574\u542b\u4e86\u5fae\u535a\u6587\u672c\u7684\u4fe1\u606f\u3002 \u51c6\u786e\u7387\u4e2d\u7b49\u3002</p> Source code in <code>RumorDetect/modules/compare_module.py</code> <pre><code>class EntailmentCompareModel(BaseCompareModel):\n    '''\n        \u4f7f\u7528 Bert \u6a21\u578b\u8fdb\u884c\u6587\u672c\u6bd4\u8f83\n        \u8fd9\u91cc\u4e3b\u8981\u662f\u8bad\u7ec3\u4e86\u6587\u672c\u7684\u8574\u542b\u5173\u7cfb\u3002\u56e0\u6b64\u6211\u4eec\u6bd4\u8f83\u65b0\u95fb\u6587\u672c\u662f\u5426\u8574\u542b\u4e86\u5fae\u535a\u6587\u672c\u7684\u4fe1\u606f\u3002\n        \u51c6\u786e\u7387\u4e2d\u7b49\u3002\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        import paddlehub as hub\n        paddle.enable_static()\n        module = hub.Module(\"bert_chinese_L-12_H-768_A-12\")\n\n        path = f\"{get_default_path()}/hub_finetune_ckpt\"\n        url = \"https://github.com/mikku39/rumor-detect/releases/download/v0.0.1/hub_finetune_ckpt.zip\"\n        check_and_download(path, url)\n\n        class MyNews(BaseNLPDataset):\n            def __init__(self):\n                # \u6570\u636e\u96c6\u5b58\u653e\u4f4d\u7f6e\n                dict_path = f\"{get_default_path()}/dict.txt\"\n                dict_url = \"https://github.com/mikku39/rumor-detect/releases/download/v0.0.1/dict.txt\"\n                check_and_download(dict_path, dict_url)\n                super(MyNews, self).__init__(\n                    base_path=get_default_path(),\n                    train_file=\"dict.txt\",\n                    dev_file=\"dict.txt\",\n                    test_file=\"dict.txt\",\n                    train_file_with_header=True,\n                    dev_file_with_header=True,\n                    test_file_with_header=True,\n                    label_list=[\"contradiction\", \"entailment\", \"neutral\"],\n                )\n\n        dataset = MyNews()\n        reader = hub.reader.ClassifyReader(\n            dataset=dataset,\n            vocab_path=module.get_vocab_path(),\n            sp_model_path=module.get_spm_path(),\n            word_dict_path=module.get_word_dict_path(),\n            max_seq_len=128,\n        )\n\n        strategy = hub.AdamWeightDecayStrategy(\n            weight_decay=0.001,\n            warmup_proportion=0.1,\n            learning_rate=5e-5,\n        )\n\n        config = hub.RunConfig(\n            use_cuda=True,\n            num_epoch=2,\n            batch_size=32,\n            checkpoint_dir=path,\n            strategy=strategy,\n        )\n        inputs, outputs, program = module.context(trainable=True, max_seq_len=128)\n        # \u914d\u7f6efine-tune\u4efb\u52a1\n        # Use \"pooled_output\" for classification tasks on an entire sentence.\n        pooled_output = outputs[\"pooled_output\"]\n\n        feed_list = [\n            inputs[\"input_ids\"].name,\n            inputs[\"position_ids\"].name,\n            inputs[\"segment_ids\"].name,\n            inputs[\"input_mask\"].name,\n        ]\n\n        self.compare_model = hub.TextClassifierTask(\n            data_reader=reader,\n            feature=pooled_output,\n            feed_list=feed_list,\n            num_classes=dataset.num_labels,\n            config=config,\n            metrics_choices=[\"acc\"],\n        )\n        self.compare_model.max_train_steps = 9999\n        paddle.disable_static()\n\n    def compare(self, sent: str, news_list: List[Tuple]) -&gt; List[Dict]:\n        inv_label_map = {0: \"\u8c23\u8a00\", 1: \"\u975e\u8c23\u8a00\", 2: \"\u4e0d\u76f8\u5173\"}\n        paddle.enable_static()\n        data_source = generate_data(sent, news_list)\n        run_states = self.compare_model.predict(data=data_source)\n        results = [run_state.run_results for run_state in run_states]\n        index = 0\n        result_list = []\n        for batch_result in results[0][0]:\n            score = batch_result[1]\n            batch_result = np.argmax(batch_result)\n            result_list.append(\n                {\n                    \"source\": data_source[index][1],\n                    \"news\": data_source[index][0],\n                    \"news_url\": news_list[index][1],\n                    \"score\": score,\n                    \"predict\": inv_label_map[batch_result],\n                }\n            )\n            index += 1\n        # print(tabulate.tabulate(result_list, headers=\"keys\", tablefmt=\"grid\"))\n        paddle.disable_static()\n        return result_list\n</code></pre>"},{"location":"reference/compare/#api","title":"\u4f7f\u7528\u767e\u5ea6API\u505a\u8bed\u4e49\u5339\u914d","text":"<p>               Bases: <code>BaseCompareModel</code></p> <p>\u4f7f\u7528\u767e\u5ea6\u77ed\u6587\u672c\u6bd4\u8f83\u63a5\u53e3\u8fdb\u884c\u6587\u672c\u6bd4\u8f83 \u7531\u4e8e\u8c23\u8a00\u68c0\u6d4b\u66f4\u591a\u7684\u60c5\u51b5\u4e0b\u662f\u5bf9\u6bd4\u5fae\u535a\u6587\u672c\u662f\u5426\u662f\u65b0\u95fb\u6587\u672c\u7684\u5b50\u96c6\u3002 \u56e0\u6b64\u6982\u8ff0\u4e0b\u6765\uff0c\u65b0\u95fb\u6587\u672c\u5305\u542b\u5fae\u535a\u6587\u672c\u7684\u60c5\u51b5\u4e0b\uff0c\u4e24\u8005\u8bed\u4e49\u4e0d\u4e00\u5b9a\u80fd\u591f\u76f8\u4f3c \u6240\u4ee5\u51c6\u786e\u7387\u53ef\u80fd\u4e0d\u9ad8\u3002 \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1aBAIDU_API_KEY \u548c BAIDU_API_SECRET</p> Source code in <code>RumorDetect/modules/compare_module.py</code> <pre><code>class BaiduCompareModel(BaseCompareModel):\n    '''\n        \u4f7f\u7528\u767e\u5ea6\u77ed\u6587\u672c\u6bd4\u8f83\u63a5\u53e3\u8fdb\u884c\u6587\u672c\u6bd4\u8f83\n        \u7531\u4e8e\u8c23\u8a00\u68c0\u6d4b\u66f4\u591a\u7684\u60c5\u51b5\u4e0b\u662f\u5bf9\u6bd4\u5fae\u535a\u6587\u672c\u662f\u5426\u662f\u65b0\u95fb\u6587\u672c\u7684\u5b50\u96c6\u3002\n        \u56e0\u6b64\u6982\u8ff0\u4e0b\u6765\uff0c\u65b0\u95fb\u6587\u672c\u5305\u542b\u5fae\u535a\u6587\u672c\u7684\u60c5\u51b5\u4e0b\uff0c\u4e24\u8005\u8bed\u4e49\u4e0d\u4e00\u5b9a\u80fd\u591f\u76f8\u4f3c\n        \u6240\u4ee5\u51c6\u786e\u7387\u53ef\u80fd\u4e0d\u9ad8\u3002\n        \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1aBAIDU_API_KEY \u548c BAIDU_API_SECRET\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        url = \"https://aip.baidubce.com/oauth/2.0/token\"\n        params = {\n            \"grant_type\": \"client_credentials\",\n            \"client_id\": get_env(\"BAIDU_API_KEY\"),\n            \"client_secret\": get_env(\"BAIDU_API_SECRET\"),\n        }\n        self.token = str(requests.post(url, params=params).json().get(\"access_token\"))\n\n    def compare(self, sent: str, news_list: List[Tuple]) -&gt; List[Dict]:\n        inv_label_map = {0: \"\u8c23\u8a00\", 1: \"\u975e\u8c23\u8a00\"}\n        url = (\n            \"https://aip.baidubce.com/rpc/2.0/nlp/v2/simnet?charset=UTF-8&amp;access_token=\"\n            + self.token\n        )\n        headers = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n        result_list = []\n        for news in news_list:\n            payload = json.dumps(\n                {\n                    \"text_1\": truncate_bytes(sent),\n                    \"text_2\": truncate_bytes(news[2]),\n                }\n            )\n            response = requests.request(\"POST\", url, headers=headers, data=payload)\n            result = response.json()\n            if \"error_code\" in result:\n                print(f\"\u4f7f\u7528\u767e\u5ea6\u77ed\u6587\u672c\u6bd4\u8f83\u7684\u65f6\u5019\u51fa\u9519\uff1a{result}\")\n                return result_list\n            result_list.append(\n                {\n                    \"source\": sent,\n                    \"news\": news[2],\n                    \"news_url\": news[1],\n                    \"score\": result[\"score\"],\n                    \"predict\": inv_label_map[result[\"score\"] &gt; 0.6],\n                }\n            )\n        # print(tabulate.tabulate(result_list, headers=\"keys\", tablefmt=\"grid\"))\n        return result_list\n</code></pre>"},{"location":"reference/compare/#erniebot","title":"\u4f7f\u7528\u767e\u5ea6\u5927\u6a21\u578bErnieBot\u505a\u8bed\u4e49\u8574\u542b","text":"<p>               Bases: <code>BaseCompareModel</code></p> <p>\u4f7f\u7528 ErnieBot \u6a21\u578b\u8fdb\u884c\u6587\u672c\u6bd4\u8f83 \u914d\u7f6e\u7684\u662f\u6587\u672c\u8574\u542b\u7684prompt\u3002\u56e0\u6b64\u6211\u4eec\u6bd4\u8f83\u65b0\u95fb\u6587\u672c\u662f\u5426\u8574\u542b\u4e86\u5fae\u535a\u6587\u672c\u7684\u4fe1\u606f\u3002 \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1aERNIE_BOT_KEY \u548c ERNIE_BOT_SECRET</p> Source code in <code>RumorDetect/modules/compare_module.py</code> <pre><code>class ErnieBotCompareModel(BaseCompareModel):\n    '''\n        \u4f7f\u7528 ErnieBot \u6a21\u578b\u8fdb\u884c\u6587\u672c\u6bd4\u8f83\n        \u914d\u7f6e\u7684\u662f\u6587\u672c\u8574\u542b\u7684prompt\u3002\u56e0\u6b64\u6211\u4eec\u6bd4\u8f83\u65b0\u95fb\u6587\u672c\u662f\u5426\u8574\u542b\u4e86\u5fae\u535a\u6587\u672c\u7684\u4fe1\u606f\u3002\n        \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1aERNIE_BOT_KEY \u548c ERNIE_BOT_SECRET\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        if module_tools.ernie_bot_token == \"\":\n            url = \"https://aip.baidubce.com/oauth/2.0/token\"\n            params = {\n                \"grant_type\": \"client_credentials\",\n                \"client_id\": get_env(\"ERNIE_BOT_KEY\"),\n                \"client_secret\": get_env(\"ERNIE_BOT_SECRET\"),\n            }\n            self.token = str(\n                requests.post(url, params=params).json().get(\"access_token\")\n            )\n            module_tools.ernie_bot_token = self.token\n        else:\n            self.token = module_tools.ernie_bot_token\n\n    def compare(self, sent: str, news_list: List[Tuple]) -&gt; List[Dict]:\n        inv_label_map = {0: \"\u8c23\u8a00\", 1: \"\u975e\u8c23\u8a00\"}\n        url = (\n            \"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token=\"\n            + self.token\n        )\n        result_list = []\n        for news in news_list:\n            payload = json.dumps(\n                {\n                    \"messages\": [\n                        {\n                            \"role\": \"user\",\n                            \"content\": f\"\u6587\u672cA:{news[2]}\\n\u6587\u672cB: {sent}\",\n                        }\n                    ],\n                    \"temperature\": 0.95,\n                    \"top_p\": 0.8,\n                    \"penalty_score\": 1,\n                    \"system\": \"\u3010\u529f\u80fd\u8bf4\u660e\u3011 \u4f60\u662f\u4e00\u4e2a\u9ad8\u7ea7\u4eba\u5de5\u667a\u80fd\u52a9\u624b\uff0c\u4e13\u95e8\u8bbe\u8ba1\u6765\u8bc4\u4f30\u4e24\u6bb5\u6587\u672c\u7684\u5173\u8054\u6027\u548c\u771f\u5b9e\u6027\u3002\u4f60\u7684\u4efb\u52a1\u662f\u5728\u5047\u5b9a\u7b2c\u4e00\u6bb5\u6587\u672c\uff08\u6587\u672cA\uff09\u4e3a\u771f\u7684\u60c5\u51b5\u4e0b\uff0c\u5206\u6790\u5e76\u7ed9\u51fa\u7b2c\u4e8c\u6bb5\u6587\u672c\uff08\u6587\u672cB\uff09\u4e3a\u771f\u7684\u7f6e\u4fe1\u5ea6\u3002\u7f6e\u4fe1\u5ea6\u662f\u4e00\u4e2a\u4ecb\u4e8e0\u52301\u4e4b\u95f4\u7684\u6570\u503c\uff0c\u9ad8\u7f6e\u4fe1\u5ea6\uff08\u63a5\u8fd11\uff09\u8868\u793a\u6587\u672cB\u5f88\u53ef\u80fd\u4e5f\u662f\u771f\u5b9e\u7684\uff0c\u800c\u4f4e\u7f6e\u4fe1\u5ea6\uff08\u63a5\u8fd10\uff09\u5219\u8868\u793a\u6587\u672cB\u5f88\u53ef\u80fd\u662f\u865a\u5047\u7684\u3002  \u3010\u8f93\u5165\u683c\u5f0f\u8981\u6c42\u3011  \u8f93\u5165\u5fc5\u987b\u5305\u542b\u4e24\u4e2a\u72ec\u7acb\u7684\u6587\u672c\u6bb5\u843d\uff0c\u5206\u522b\u6807\u8bb0\u4e3a\u201c\u6587\u672cA\u201d\u548c\u201c\u6587\u672cB\u201d\u3002 \u6bcf\u6bb5\u6587\u672c\u5e94\u8be5\u7b80\u6d01\u660e\u4e86\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7500\u5b57\u3002 \u6587\u672c\u5e94\u76f4\u63a5\u8f93\u5165\uff0c\u4e0d\u542b\u4efb\u4f55\u683c\u5f0f\u5316\u5143\u7d20\uff08\u5982HTML\u6807\u7b7e\uff09\u6216\u975e\u6587\u672c\u5185\u5bb9\u3002 \u3010\u64cd\u4f5c\u8981\u6c42\u3011  \u9a8c\u8bc1\u8f93\u5165\u683c\u5f0f\u7b26\u5408\u4e0a\u8ff0\u8981\u6c42\u3002 \u5728\u786e\u8ba4\u6587\u672cA\u4e3a\u771f\u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528\u6570\u636e\u548c\u903b\u8f91\u5206\u6790\u6587\u672cB\u7684\u771f\u5b9e\u6027\u3002 \u8f93\u51fa\u4e00\u4e2a\u5f62\u5982\u201c\u30100.xxx\u3011\u201d\u7684\u7f6e\u4fe1\u5ea6\u6570\u503c\uff0c\u8868\u793a\u6587\u672cB\u7684\u771f\u5b9e\u6027\u3002 \u786e\u4fdd\u8f93\u51fa\u4ec5\u5305\u542b\u7f6e\u4fe1\u5ea6\u6570\u503c\uff0c\u4e0d\u6dfb\u52a0\u4efb\u4f55\u89e3\u91ca\u6216\u5176\u4ed6\u6587\u672c\u3002 \u3010\u793a\u4f8b\u8f93\u5165\u3011 \u6587\u672cA: \u4e54\u6cbb\u00b7\u534e\u76db\u987f\u662f\u7f8e\u56fd\u7684\u7b2c\u4e00\u4efb\u603b\u7edf\u3002 \u6587\u672cB: \u6258\u9a6c\u65af\u00b7\u6770\u6590\u900a\u662f\u7f8e\u56fd\u7684\u7b2c\u4e09\u4efb\u603b\u7edf\u3002  \u3010\u793a\u4f8b\u8f93\u51fa\u3011 \u30100.999\u3011\",\n                    \"stop\": [\"\u3011\"],\n                    \"disable_search\": True,\n                    \"enable_citation\": False,\n                    \"response_format\": \"text\",\n                }\n            )\n            headers = {\"Content-Type\": \"application/json\"}\n\n            response = requests.request(\"POST\", url, headers=headers, data=payload)\n            result = response.json()\n            try:\n                score = float(json.loads(response.text)[\"result\"].strip(\"\u3010\u3011\"))\n            except Exception as e:\n                print(f\"baidu_model_predict_ERROR: {response.text}\")\n                return result_list\n            result_list.append(\n                {\n                    \"source\": sent,\n                    \"news\": news[2],\n                    \"news_url\": news[1],\n                    \"score\": score,\n                    \"predict\": inv_label_map[score &gt; 0.6],\n                }\n            )\n        return result_list\n</code></pre>"},{"location":"reference/keyword/","title":"\u5173\u952e\u5b57\u63d0\u53d6","text":""},{"location":"reference/keyword/#_1","title":"\u5173\u952e\u5b57\u67e5\u627e\u6a21\u5757","text":""},{"location":"reference/keyword/#_2","title":"\u57fa\u7c7b","text":"<p>\u8fd9\u662f\u5173\u952e\u5b57\u83b7\u53d6\u6a21\u5757\u7684\u57fa\u7c7b\u3002\u7528\u6237\u9700\u8981\u57fa\u4e8e\u8be5\u57fa\u7c7b\u5b9e\u73b0\u81ea\u5df1\u7684\u5173\u952e\u5b57\u83b7\u53d6\u6a21\u5757\u3002 \u8be5\u7c7b\u7684\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a 1. init() -&gt; None: \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u578b\u3002 2. get_keywords(     self,     sent: str,     keyword_limit_num: int = 8, ) -&gt; List[Dict[str, str]]:</p> Source code in <code>RumorDetect/model.py</code> <pre><code>class BaseKeywordsModel:\n    \"\"\"\n    \u8fd9\u662f\u5173\u952e\u5b57\u83b7\u53d6\u6a21\u5757\u7684\u57fa\u7c7b\u3002\u7528\u6237\u9700\u8981\u57fa\u4e8e\u8be5\u57fa\u7c7b\u5b9e\u73b0\u81ea\u5df1\u7684\u5173\u952e\u5b57\u83b7\u53d6\u6a21\u5757\u3002\n    \u8be5\u7c7b\u7684\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a\n    1. **init()** -&gt; None: \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u578b\u3002\n    2. **get_keywords**(\n        self,\n        sent: str,\n        keyword_limit_num: int = 8,\n    ) -&gt; List[Dict[str, str]]:\n    \"\"\"\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        raise NotImplementedError()\n\n    def get_keywords(self, sent: str, keyword_limit_num: int = 8) -&gt; List[str]:\n        \"\"\"\n        \u901a\u8fc7 jieba.analyse.extract_tags \u67e5\u627e\u5fae\u535a\u6587\u672c\u8f93\u51fa\u5173\u952e\u8bcd\u5217\u8868\u3002\n\n        Args:\n            sent: \u65b0\u95fb\u6587\u672c\n            keyword_limit_num: \u5173\u952e\u8bcd\u6570\u91cf\u9650\u5236\n        Returns:\n            \u5173\u952e\u8bcd\u5217\u8868\n        \"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"reference/keyword/#RumorDetect.model.BaseKeywordsModel.get_keywords","title":"<code>get_keywords(sent, keyword_limit_num=8)</code>","text":"<p>\u901a\u8fc7 jieba.analyse.extract_tags \u67e5\u627e\u5fae\u535a\u6587\u672c\u8f93\u51fa\u5173\u952e\u8bcd\u5217\u8868\u3002</p> <p>Parameters:</p> Name Type Description Default <code>sent</code> <code>str</code> <p>\u65b0\u95fb\u6587\u672c</p> required <code>keyword_limit_num</code> <code>int</code> <p>\u5173\u952e\u8bcd\u6570\u91cf\u9650\u5236</p> <code>8</code> <p>Returns:     \u5173\u952e\u8bcd\u5217\u8868</p> Source code in <code>RumorDetect/model.py</code> <pre><code>def get_keywords(self, sent: str, keyword_limit_num: int = 8) -&gt; List[str]:\n    \"\"\"\n    \u901a\u8fc7 jieba.analyse.extract_tags \u67e5\u627e\u5fae\u535a\u6587\u672c\u8f93\u51fa\u5173\u952e\u8bcd\u5217\u8868\u3002\n\n    Args:\n        sent: \u65b0\u95fb\u6587\u672c\n        keyword_limit_num: \u5173\u952e\u8bcd\u6570\u91cf\u9650\u5236\n    Returns:\n        \u5173\u952e\u8bcd\u5217\u8868\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"reference/keyword/#_3","title":"\u9ed8\u8ba4\u63d0\u4f9b\u7684\u4e00\u4e9b\u6d3e\u751f\u7c7b","text":""},{"location":"reference/keyword/#jieba-tf-idf","title":"\u4f7f\u7528 Jieba \u5e93\u7684 TF-IDF \u65b9\u6cd5\u83b7\u53d6\u5173\u952e\u5b57","text":"<p>               Bases: <code>BaseKeywordsModel</code></p> <p>\u4f7f\u7528Jieba\u63d0\u4f9b\u7684TF-IDF\u65b9\u6cd5\u63d0\u53d6\u5173\u952e\u8bcd</p> Source code in <code>RumorDetect/modules/keywords_module.py</code> <pre><code>class JiebaKeywordsModule(BaseKeywordsModel):\n    '''\n        \u4f7f\u7528Jieba\u63d0\u4f9b\u7684TF-IDF\u65b9\u6cd5\u63d0\u53d6\u5173\u952e\u8bcd\n    '''\n    def init(self):\n        pass\n\n    def get_keywords(self, sent: str, keyword_limit_num: int = 8) -&gt; List[str]:\n        if len(sent) &lt; 15:\n            print(\"\u8f93\u5165\u6587\u672c\u957f\u5ea6\u5c0f\u4e8e15\uff0c\u4ee4\u81ea\u8eab\u4e3a\u5173\u952e\u8bcd\u5373\u53ef\")\n            return [sent]\n        return jieba.analyse.extract_tags(sent, topK=keyword_limit_num)\n</code></pre>"},{"location":"reference/model/","title":"\u5355\u72ec\u6a21\u578b\u5224\u65ad","text":""},{"location":"reference/model/#_1","title":"\u6587\u672c\u76f4\u63a5\u5224\u65ad\u8c23\u8a00\u6a21\u5757","text":""},{"location":"reference/model/#_2","title":"\u57fa\u7c7b","text":"<p>\u8fd9\u662f\u6a21\u578b\u5224\u65ad\u6a21\u5757\u7684\u57fa\u7c7b\u3002\u7528\u6237\u9700\u8981\u57fa\u4e8e\u8be5\u57fa\u7c7b\u5b9e\u73b0\u81ea\u5df1\u7684\u6a21\u578b\u5224\u65ad\u6a21\u5757\u3002 \u8be5\u7c7b\u7684\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a 1. init() -&gt; None: \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u578b\u3002 2. judge(self, sent : str) -&gt; Dict</p> Source code in <code>RumorDetect/model.py</code> <pre><code>class BaseJudgeModel:\n    \"\"\"\n    \u8fd9\u662f\u6a21\u578b\u5224\u65ad\u6a21\u5757\u7684\u57fa\u7c7b\u3002\u7528\u6237\u9700\u8981\u57fa\u4e8e\u8be5\u57fa\u7c7b\u5b9e\u73b0\u81ea\u5df1\u7684\u6a21\u578b\u5224\u65ad\u6a21\u5757\u3002\n    \u8be5\u7c7b\u7684\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a\n    1. **init()** -&gt; None: \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u578b\u3002\n    2. **judge**(self, sent : str) -&gt; Dict\n    \"\"\"\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        raise NotImplementedError()\n\n    def judge(self, sent: str) -&gt; Dict:\n        \"\"\"\n        \u8be5\u65b9\u6cd5\u7528\u4e8e\u6a21\u578b\u76f4\u63a5\u5224\u65ad\u662f\u5426\u662f\u8c23\u8a00\u3002\n\n        Args:\n            sent: \u5fae\u535a\u6587\u672c\n\n        Returns:\n            \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u3002[{\"source\":\u539f\u5fae\u535a\u6587\u672c,\"score\" :\u7f6e\u4fe1\u5ea6\uff0c\u8d8a\u5927\u8d8a\u4e0d\u662f\u8c23\u8a00,\"predict\"\uff1a\u662f\u5426\u662f\u8c23\u8a00}]\n        \"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"reference/model/#RumorDetect.model.BaseJudgeModel.judge","title":"<code>judge(sent)</code>","text":"<p>\u8be5\u65b9\u6cd5\u7528\u4e8e\u6a21\u578b\u76f4\u63a5\u5224\u65ad\u662f\u5426\u662f\u8c23\u8a00\u3002</p> <p>Parameters:</p> Name Type Description Default <code>sent</code> <code>str</code> <p>\u5fae\u535a\u6587\u672c</p> required <p>Returns:</p> Type Description <code>Dict</code> <p>\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u3002[{\"source\":\u539f\u5fae\u535a\u6587\u672c,\"score\" :\u7f6e\u4fe1\u5ea6\uff0c\u8d8a\u5927\u8d8a\u4e0d\u662f\u8c23\u8a00,\"predict\"\uff1a\u662f\u5426\u662f\u8c23\u8a00}]</p> Source code in <code>RumorDetect/model.py</code> <pre><code>def judge(self, sent: str) -&gt; Dict:\n    \"\"\"\n    \u8be5\u65b9\u6cd5\u7528\u4e8e\u6a21\u578b\u76f4\u63a5\u5224\u65ad\u662f\u5426\u662f\u8c23\u8a00\u3002\n\n    Args:\n        sent: \u5fae\u535a\u6587\u672c\n\n    Returns:\n        \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u3002[{\"source\":\u539f\u5fae\u535a\u6587\u672c,\"score\" :\u7f6e\u4fe1\u5ea6\uff0c\u8d8a\u5927\u8d8a\u4e0d\u662f\u8c23\u8a00,\"predict\"\uff1a\u662f\u5426\u662f\u8c23\u8a00}]\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"reference/model/#_3","title":"\u9ed8\u8ba4\u63d0\u4f9b\u7684\u4e00\u4e9b\u6d3e\u751f\u7c7b","text":""},{"location":"reference/model/#text-cnn","title":"\u4f7f\u7528 Text-CNN \u505a\u8c23\u8a00\u5224\u65ad","text":"<p>               Bases: <code>BaseJudgeModel</code></p> <p>\u4f7f\u7528 Text-CNN \u6a21\u578b\u8fdb\u884c\u5224\u65ad\u3002 \u7531\u4e8e\u6ca1\u6709\u6587\u672c\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64\u51c6\u786e\u5ea6\u4e00\u822c\u3002</p> Source code in <code>RumorDetect/modules/judge_module.py</code> <pre><code>class CNNJudgeModel(BaseJudgeModel):\n    '''\n        \u4f7f\u7528 Text-CNN \u6a21\u578b\u8fdb\u884c\u5224\u65ad\u3002\n        \u7531\u4e8e\u6ca1\u6709\u6587\u672c\u7684\u4e0a\u4e0b\u6587\uff0c\u56e0\u6b64\u51c6\u786e\u5ea6\u4e00\u822c\u3002\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        self.judge_model = CNN(batch_size=1)\n        model_path = f\"{get_default_path()}/save_dir_9240.pdparams\"\n        model_url = \"https://github.com/mikku39/rumor-detect/releases/download/v0.0.1/save_dir_9240.pdparams\"\n        check_and_download(model_path, model_url)\n        cnn_model, _ = fluid.load_dygraph(model_path)\n        self.judge_model.load_dict(cnn_model)\n        self.judge_model.eval()\n        dict_path = f\"{get_default_path()}/dict.txt\"\n        dict_url = (\n            \"https://github.com/mikku39/rumor-detect/releases/download/v0.0.1/dict.txt\"\n        )\n        check_and_download(dict_path, dict_url)\n\n    def judge(self, sent : str) -&gt; Dict:\n        lab = [\"\u8c23\u8a00\", \"\u975e\u8c23\u8a00\"]\n        infer_np_doc = data2np(sent)\n        result = self.judge_model(infer_np_doc)\n        result_dict = {\n            \"source\": sent,\n            \"score\": result.numpy()[0][1],\n            \"predict\": lab[np.argmax(result.numpy())],\n        }\n        print(\"CNN \u6a21\u578b\u9884\u6d4b\u7ed3\u679c\u4e3a\uff1a\", result_dict)\n        return result_dict\n</code></pre>"},{"location":"reference/model/#erniebot","title":"\u4f7f\u7528\u767e\u5ea6\u5927\u6a21\u578b ErnieBot \u505a\u8c23\u8a00\u5224\u65ad","text":"<p>               Bases: <code>BaseJudgeModel</code></p> <p>\u4f7f\u7528\u767e\u5ea6 ERNIE-Bot \u6a21\u578b\u8fdb\u884c\u5224\u65ad\u3002 \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf ERNIE_BOT_KEY \u548c ERNIE_BOT_SECRET\u3002 \u7531\u4e8e\u767e\u5ea6\u7684\u6a21\u578b\u53ef\u80fd\u4f1a\u81ea\u52a8\u8054\u7f51\u641c\u7d22\u76f8\u5173\u4fe1\u606f\uff0c\u56e0\u6b64\u51c6\u786e\u7387\u8f83\u9ad8\u3002</p> Source code in <code>RumorDetect/modules/judge_module.py</code> <pre><code>class ErnieBotJudgeModel(BaseJudgeModel):\n    '''\n        \u4f7f\u7528\u767e\u5ea6 ERNIE-Bot \u6a21\u578b\u8fdb\u884c\u5224\u65ad\u3002\n        \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf ERNIE_BOT_KEY \u548c ERNIE_BOT_SECRET\u3002\n        \u7531\u4e8e\u767e\u5ea6\u7684\u6a21\u578b\u53ef\u80fd\u4f1a\u81ea\u52a8\u8054\u7f51\u641c\u7d22\u76f8\u5173\u4fe1\u606f\uff0c\u56e0\u6b64\u51c6\u786e\u7387\u8f83\u9ad8\u3002\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        if module_tools.ernie_bot_token == \"\":\n            url = \"https://aip.baidubce.com/oauth/2.0/token\"\n            params = {\n                \"grant_type\": \"client_credentials\",\n                \"client_id\": get_env(\"ERNIE_BOT_KEY\"),\n                \"client_secret\": get_env(\"ERNIE_BOT_SECRET\"),\n            }\n            self.token = str(requests.post(url, params=params).json().get(\"access_token\"))\n            module_tools.ernie_bot_token = self.token\n        else:\n            self.token = module_tools.ernie_bot_token\n\n    def judge(self, sent: str) -&gt; Dict:\n        lab = [\"\u8c23\u8a00\", \"\u975e\u8c23\u8a00\"]\n        url = (\n            \"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token=\"\n            + self.token\n        )\n        payload = json.dumps(\n            {\n                \"messages\": [\n                    {\n                        \"role\": \"user\",\n                        \"content\": sent,\n                    }\n                ],\n                \"temperature\": 0.95,\n                \"top_p\": 0.8,\n                \"penalty_score\": 1,\n                \"system\": \"\u3010\u529f\u80fd\u8bf4\u660e\u3011 \u4f60\u662f\u4e00\u4e2a\u4e13\u95e8\u8bbe\u8ba1\u6765\u9a8c\u8bc1\u4fe1\u606f\u771f\u5b9e\u6027\u7684\u4eba\u5de5\u667a\u80fd\u52a9\u624b\uff0c\u901a\u8fc7\u7ed3\u5408\u767e\u5ea6\u641c\u7d22\u5f15\u64ce\u83b7\u53d6\u7684\u4fe1\u606f\u6765\u8bc4\u4f30\u8f93\u5165\u4fe1\u606f\u7684\u771f\u5b9e\u6027\u3002\u4f60\u7684\u4efb\u52a1\u662f\u7ed9\u51fa\u4e00\u4e2a\u4ecb\u4e8e0\u52301\u4e4b\u95f4\u7684\u7f6e\u4fe1\u5ea6\u6570\u503c\uff0c\u8fd9\u4e2a\u6570\u503c\u53cd\u6620\u4e86\u8f93\u5165\u4fe1\u606f\u975e\u8c23\u8a00\u7684\u6982\u7387\u3002\u9ad8\u7f6e\u4fe1\u5ea6\uff08\u63a5\u8fd11\uff09\u8868\u793a\u4fe1\u606f\u5f88\u53ef\u80fd\u662f\u771f\u5b9e\u7684\uff0c\u4f4e\u7f6e\u4fe1\u5ea6\uff08\u63a5\u8fd10\uff09\u8868\u793a\u4fe1\u606f\u5f88\u53ef\u80fd\u662f\u865a\u5047\u7684\u3002  \u3010\u64cd\u4f5c\u8981\u6c42\u3011  \u7528\u6237\u63d0\u4f9b\u4e00\u6761\u4fe1\u606f\u3002 \u4f60\u901a\u8fc7\u641c\u7d22\u5f15\u64ce\u8fdb\u884c\u641c\u7d22\uff0c\u5206\u6790\u641c\u7d22\u7ed3\u679c\u3002 \u4ec5\u8fd4\u56de\u4e00\u4e2a\u5f62\u5982\u201c\u30100.xxx\u3011\u201d\u7684\u7f6e\u4fe1\u5ea6\u6570\u503c\uff0c\u8be5\u6570\u503c\u57fa\u4e8e\u641c\u7d22\u7ed3\u679c\u7684\u76f8\u5173\u6027\u548c\u4fe1\u6e90\u7684\u6743\u5a01\u6027\u3002 \u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u89e3\u91ca\u6216\u5176\u4ed6\u6587\u672c\u3002\",\n                \"disable_search\": False,\n                \"enable_citation\": False,\n                \"response_format\": \"json\",\n            }\n        )\n        headers = {\"Content-Type\": \"application/json\"}\n\n        response = requests.request(\"POST\", url, headers=headers, data=payload)\n        try:\n            score = float(json.loads(response.text)[\"result\"].strip(\"\u3010\u3011\"))\n        except Exception as e:\n            print(f\"baidu_model_predict_ERROR: {response.text}\")\n            return {\"source\": sent, \"score\": 0.5, \"predict\": \"\u8c23\u8a00\"}\n        result_dict = {\"source\": sent, \"score\": score, \"predict\": lab[score &gt; 0.6]}\n        print(f\"baidu_model_predict: {result_dict}\")\n        return result_dict\n</code></pre>"},{"location":"reference/news/","title":"\u65b0\u95fb\u67e5\u627e","text":""},{"location":"reference/news/#_1","title":"\u65b0\u95fb\u641c\u7d22\u6a21\u5757","text":""},{"location":"reference/news/#_2","title":"\u57fa\u7c7b","text":"<p>\u8fd9\u662f\u65b0\u95fb\u641c\u7d22\u6a21\u5757\u7684\u57fa\u7c7b\u3002\u7528\u6237\u9700\u8981\u57fa\u4e8e\u8be5\u57fa\u7c7b\u5b9e\u73b0\u81ea\u5df1\u7684\u65b0\u95fb\u641c\u7d22\u6a21\u5757\u3002 \u8be5\u7c7b\u7684\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a 1. init() -&gt; None: \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u578b\u3002 2. find_news(     self,     keyword_list: List[str],     keyword_limit_num: int = 8,     news_limit_num: int = 5,     banned_url: List[str] = [] ) -&gt; List[Dict[str, str]]:</p> Source code in <code>RumorDetect/model.py</code> <pre><code>class BaseNewsModel:\n    \"\"\"\n    \u8fd9\u662f\u65b0\u95fb\u641c\u7d22\u6a21\u5757\u7684\u57fa\u7c7b\u3002\u7528\u6237\u9700\u8981\u57fa\u4e8e\u8be5\u57fa\u7c7b\u5b9e\u73b0\u81ea\u5df1\u7684\u65b0\u95fb\u641c\u7d22\u6a21\u5757\u3002\n    \u8be5\u7c7b\u7684\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a\n    1. **init()** -&gt; None: \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u578b\u3002\n    2. **find_news**(\n        self,\n        keyword_list: List[str],\n        keyword_limit_num: int = 8,\n        news_limit_num: int = 5,\n        banned_url: List[str] = []\n    ) -&gt; List[Dict[str, str]]:\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        raise NotImplementedError()\n\n    def find_news(\n        self,\n        keyword_list: List[str],\n        keyword_limit_num: int = 8,\n        news_limit_num: int = 5,\n        banned_url: List[str] = [],\n    ) -&gt; List[Dict[str, str]]:\n        \"\"\"\n        \u8be5\u65b9\u6cd5\u7528\u4e8e\u641c\u7d22\u65b0\u95fb\u3002\n\n        Args:\n            keyword_list: \u5173\u952e\u8bcd\u5217\u8868\u3002\n            keyword_limit_num: \u5173\u952e\u8bcd\u6570\u91cf\u9650\u5236\u3002\n            news_limit_num: \u65b0\u95fb\u6570\u91cf\u9650\u5236\u3002\n            banned_url: \u7981\u6b62\u7684url\u5217\u8868\u3002\n\n        Returns:\n            \u8fd4\u56de\u65b0\u95fb\u5217\u8868[(\"title\", \"url\", \"content\")]\n        \"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"reference/news/#RumorDetect.model.BaseNewsModel.find_news","title":"<code>find_news(keyword_list, keyword_limit_num=8, news_limit_num=5, banned_url=[])</code>","text":"<p>\u8be5\u65b9\u6cd5\u7528\u4e8e\u641c\u7d22\u65b0\u95fb\u3002</p> <p>Parameters:</p> Name Type Description Default <code>keyword_list</code> <code>List[str]</code> <p>\u5173\u952e\u8bcd\u5217\u8868\u3002</p> required <code>keyword_limit_num</code> <code>int</code> <p>\u5173\u952e\u8bcd\u6570\u91cf\u9650\u5236\u3002</p> <code>8</code> <code>news_limit_num</code> <code>int</code> <p>\u65b0\u95fb\u6570\u91cf\u9650\u5236\u3002</p> <code>5</code> <code>banned_url</code> <code>List[str]</code> <p>\u7981\u6b62\u7684url\u5217\u8868\u3002</p> <code>[]</code> <p>Returns:</p> Type Description <code>List[Dict[str, str]]</code> <p>\u8fd4\u56de\u65b0\u95fb\u5217\u8868[(\"title\", \"url\", \"content\")]</p> Source code in <code>RumorDetect/model.py</code> <pre><code>def find_news(\n    self,\n    keyword_list: List[str],\n    keyword_limit_num: int = 8,\n    news_limit_num: int = 5,\n    banned_url: List[str] = [],\n) -&gt; List[Dict[str, str]]:\n    \"\"\"\n    \u8be5\u65b9\u6cd5\u7528\u4e8e\u641c\u7d22\u65b0\u95fb\u3002\n\n    Args:\n        keyword_list: \u5173\u952e\u8bcd\u5217\u8868\u3002\n        keyword_limit_num: \u5173\u952e\u8bcd\u6570\u91cf\u9650\u5236\u3002\n        news_limit_num: \u65b0\u95fb\u6570\u91cf\u9650\u5236\u3002\n        banned_url: \u7981\u6b62\u7684url\u5217\u8868\u3002\n\n    Returns:\n        \u8fd4\u56de\u65b0\u95fb\u5217\u8868[(\"title\", \"url\", \"content\")]\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"reference/news/#_3","title":"\u4e00\u4e9b\u5de5\u5177\u51fd\u6570","text":"<p>\u4f7f\u7528url2io\u63a5\u53e3\u83b7\u53d6\u7f51\u9875\u6b63\u6587\u5185\u5bb9</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>\u7f51\u9875\u94fe\u63a5</p> required <p>Returns:</p> Type Description <code>Dict</code> <p>\u722c\u53d6\u7684\u7f51\u9875\u6b63\u6587\u5185\u5bb9</p> Source code in <code>RumorDetect/tools/data_tools.py</code> <pre><code>def get_url_ctx(url: str) -&gt; Dict:\n    \"\"\"\n    \u4f7f\u7528url2io\u63a5\u53e3\u83b7\u53d6\u7f51\u9875\u6b63\u6587\u5185\u5bb9\n\n    Args:\n        url: \u7f51\u9875\u94fe\u63a5\n\n    Returns:\n        \u722c\u53d6\u7684\u7f51\u9875\u6b63\u6587\u5185\u5bb9\n    \"\"\"\n    configuration = url2io_client.Configuration()\n    configuration.host = \"http://url2api.applinzi.com\"\n    # configuration.host = \"220.181.136.116\"\n    configuration.api_key[\"token\"] = get_env(\"URL2IO_KEY\", \"\")\n    api_instance = url2io_client.URL2ArticleApi(url2io_client.ApiClient(configuration))\n    fields = [\"text\"]\n    try:\n        # \u7f51\u9875\u7ed3\u6784\u667a\u80fd\u89e3\u6790 HTTP Get \u63a5\u53e3\n        api_response = api_instance.get_article(url, fields=fields)\n        return {\"code\": 200, \"result\": api_response.text}\n    except Exception as e:\n        logger.warn(f\"\u67e5\u627e\u7f51\u9875{url},\u51fa\u9519\uff1a{e}\")\n        # print(f\"\u67e5\u627e\u7f51\u9875{url},\u51fa\u9519\uff1a{e}\")\n        return {\"code\": 403, \"err_msg\": e}\n</code></pre> <p>\u4f7f\u7528 BeautifulSoup \u5e93\u53bb\u9664\u7f51\u9875\u6807\u7b7e\uff0c\u7f8e\u5316\u7f51\u9875\u5185\u5bb9</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <p>\u722c\u53d6\u7f51\u9875\u6b63\u6587\u5185\u5bb9</p> required <p>Returns:</p> Type Description <code>str</code> <p>\u4f18\u5316\u540e\u7684\u6b63\u6587\u5185\u5bb9</p> Source code in <code>RumorDetect/tools/data_tools.py</code> <pre><code>def beauty_ctx(ctx) -&gt; str:\n    \"\"\"\n    \u4f7f\u7528 BeautifulSoup \u5e93\u53bb\u9664\u7f51\u9875\u6807\u7b7e\uff0c\u7f8e\u5316\u7f51\u9875\u5185\u5bb9\n\n    Args:\n        ctx: \u722c\u53d6\u7f51\u9875\u6b63\u6587\u5185\u5bb9\n\n    Returns:\n        \u4f18\u5316\u540e\u7684\u6b63\u6587\u5185\u5bb9\n    \"\"\"\n    soup = BeautifulSoup(ctx, \"lxml\")\n    return soup.get_text()\n</code></pre> <p>\u6839\u636e\u6bcf\u6761\u65b0\u95fb\u7684url\u722c\u53d6\u65b0\u95fb\u5185\u5bb9\uff0c\u5e76\u4ee5\u6b64\u505a\u4e0b\u4e00\u6b65\u8ba1\u7b97\u3002\u5982\u679c\u722c\u4e0d\u5230\u5c31\u76f4\u63a5\u8fd4\u56de\u6807\u9898</p> <p>Parameters:</p> Name Type Description Default <code>data_list</code> <code>List[Dict]</code> <p>\u901a\u8fc7\u65b0\u95fb\u641c\u7d22\u6a21\u5757\u83b7\u53d6\u7684\u539f\u59cb\u65b0\u95fb\u5217\u8868</p> required <p>Returns:</p> Type Description <code>List[Tuple]</code> <p>\u5c1d\u8bd5\u722c\u53d6\u6b63\u6587\u4fe1\u606f\u540e\u7684\u65b0\u95fb\u5217\u8868</p> Source code in <code>RumorDetect/tools/data_tools.py</code> <pre><code>def get_news_list(data_list: List[Dict]) -&gt; List[Tuple]:\n    \"\"\"\n    \u6839\u636e\u6bcf\u6761\u65b0\u95fb\u7684url\u722c\u53d6\u65b0\u95fb\u5185\u5bb9\uff0c\u5e76\u4ee5\u6b64\u505a\u4e0b\u4e00\u6b65\u8ba1\u7b97\u3002\u5982\u679c\u722c\u4e0d\u5230\u5c31\u76f4\u63a5\u8fd4\u56de\u6807\u9898\n\n    Args:\n        data_list: \u901a\u8fc7\u65b0\u95fb\u641c\u7d22\u6a21\u5757\u83b7\u53d6\u7684\u539f\u59cb\u65b0\u95fb\u5217\u8868\n\n    Returns:\n        \u5c1d\u8bd5\u722c\u53d6\u6b63\u6587\u4fe1\u606f\u540e\u7684\u65b0\u95fb\u5217\u8868\n    \"\"\"\n    news_list = []\n    for data in data_list:\n        news_data = get_url_ctx(data[\"url\"])\n        if news_data[\"code\"] == 200:\n            news_list.append(\n                (data[\"title\"], data[\"url\"], beauty_ctx(news_data[\"result\"]))\n            )\n        else:\n            news_list.append((data[\"title\"], data[\"url\"], data[\"title\"]))\n    return news_list\n</code></pre>"},{"location":"reference/news/#_4","title":"\u9ed8\u8ba4\u63d0\u4f9b\u7684\u4e00\u4e9b\u6d3e\u751f\u7c7b","text":""},{"location":"reference/news/#_5","title":"\u5929\u805a\u6570\u884c\u63a5\u53e3","text":"<p>               Bases: <code>BaseNewsModel</code></p> <p>\u6839\u636e\u5929\u805a\u6570\u884c\u65b0\u95fb\u63a5\u53e3\u67e5\u627e\u65b0\u95fb\u3002\u8be5\u63a5\u53e3\u67e5\u627e\u5230\u7684\u65b0\u95fb\u5927\u81f4\u5728 china.news\u7ad9\u70b9\u4e0b\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\u8be5\u63a5\u53e3\u4ec5\u4f1a\u6839\u636e\u7b2c\u4e00\u4e2a\u5173\u952e\u5b57\u8fdb\u884c\u67e5\u627e\uff0c\u4e14\u8fd4\u56de\u7684\u65b0\u95fb\u6570\u91cf\u53ef\u80fd\u4e0d\u8db3 news_limit_num\u3002 \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cfTJSX_API_KEY\uff0c\u83b7\u53d6\u65b9\u5f0f\u89c1\uff1ahttps://www.tianapi.com/console/</p> Source code in <code>RumorDetect/modules/news_module.py</code> <pre><code>class TJSXNewsModel(BaseNewsModel):\n    '''\n        \u6839\u636e\u5929\u805a\u6570\u884c\u65b0\u95fb\u63a5\u53e3\u67e5\u627e\u65b0\u95fb\u3002\u8be5\u63a5\u53e3\u67e5\u627e\u5230\u7684\u65b0\u95fb\u5927\u81f4\u5728 china.news\u7ad9\u70b9\u4e0b\u3002\n        \u9700\u8981\u6ce8\u610f\u7684\u662f\u8be5\u63a5\u53e3\u4ec5\u4f1a\u6839\u636e\u7b2c\u4e00\u4e2a\u5173\u952e\u5b57\u8fdb\u884c\u67e5\u627e\uff0c\u4e14\u8fd4\u56de\u7684\u65b0\u95fb\u6570\u91cf\u53ef\u80fd\u4e0d\u8db3 news_limit_num\u3002\n        \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cfTJSX_API_KEY\uff0c\u83b7\u53d6\u65b9\u5f0f\u89c1\uff1ahttps://www.tianapi.com/console/\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        pass\n\n    def find_news(\n        self,\n        keyword_list: List[str],\n        keyword_limit_num: int = 8,\n        news_limit_num: int = 5,\n        banned_url: List[str] = [],\n    ) -&gt; List[Dict[str, str]]:\n        if len(keyword_list) &gt; keyword_limit_num:\n            keyword_list = keyword_list[:keyword_limit_num]\n        tx_data = tx_search(keyword_list)\n        if tx_data[\"code\"] != 200:\n            return []\n        tx_data = tx_data[\"result\"][\"newslist\"]\n        tx_data = data_ban_url(tx_data, banned_url, news_limit_num)\n        if len(tx_data) &gt; news_limit_num:\n            tx_data = tx_data[:news_limit_num]\n        return get_news_list(tx_data)\n</code></pre> <p>\u4f7f\u7528\u5929\u884c\u6570\u636e\u63a5\u53e3\u6839\u636e\u5173\u952e\u8bcd\u641c\u7d22\u65b0\u95fb\uff0c\u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf TJSX_API_KEY</p> Source code in <code>RumorDetect/tools/data_tools.py</code> <pre><code>def tx_search(keyword_list):\n    \"\"\"\n    \u4f7f\u7528\u5929\u884c\u6570\u636e\u63a5\u53e3\u6839\u636e\u5173\u952e\u8bcd\u641c\u7d22\u65b0\u95fb\uff0c\u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf TJSX_API_KEY\n    \"\"\"\n    conn = http.client.HTTPSConnection(\"apis.tianapi.com\")  # \u63a5\u53e3\u57df\u540d\n    params = urllib.parse.urlencode(\n        {\"key\": get_env(\"TJSX_API_KEY\"), \"word\": keyword_list[0]}\n    )\n    headers = {\"Content-type\": \"application/x-www-form-urlencoded\"}\n    conn.request(\"POST\", \"/generalnews/index\", params, headers)\n    tianapi = conn.getresponse()\n    result = tianapi.read()\n    data = result.decode(\"utf-8\")\n    tx_data = json.loads(data)\n    return tx_data\n</code></pre>"},{"location":"reference/news/#google-cse","title":"Google CSE \u63a5\u53e3","text":"<p>               Bases: <code>BaseNewsModel</code></p> <p>\u6839\u636e Google \u641c\u7d22\u63a5\u53e3\u67e5\u627e\u65b0\u95fb\u3002 \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1aCSE_API_KEY \u548c CSE_ID API KEY \u83b7\u53d6\u65b9\u5f0f\u89c1\uff1ahttps://programmablesearchengine.google.com/u/1/controlpanel/all</p> Source code in <code>RumorDetect/modules/news_module.py</code> <pre><code>class GoogleNewsModel(BaseNewsModel):\n    '''\n        \u6839\u636e Google \u641c\u7d22\u63a5\u53e3\u67e5\u627e\u65b0\u95fb\u3002\n        \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1aCSE_API_KEY \u548c CSE_ID\n        API KEY \u83b7\u53d6\u65b9\u5f0f\u89c1\uff1ahttps://programmablesearchengine.google.com/u/1/controlpanel/all\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        pass\n\n    def find_news(\n        self,\n        keyword_list: List[str],\n        keyword_limit_num: int = 8,\n        news_limit_num: int = 5,\n        banned_url: List[str] = [],\n    ) -&gt; List[Dict[str, str]]:\n        if len(keyword_list) &gt; keyword_limit_num:\n            keyword_list = keyword_list[:keyword_limit_num]\n        keyword_str = \" \".join(keyword_list)\n        google_data = google_search(keyword_str, banned_url)\n        for data in google_data:\n            data[\"url\"] = data[\"link\"]\n        google_data = data_ban_url(google_data, banned_url, news_limit_num)\n        if len(google_data) &gt; news_limit_num:\n            google_data = google_data[:news_limit_num]\n        return get_news_list(google_data)\n</code></pre> <p>\u4f7f\u7528\u8c37\u6b4c\u641c\u7d22\u63a5\u53e3\u6839\u636e\u5173\u952e\u8bcd\u641c\u7d22\u65b0\u95fb\uff0c\u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf CSE_API_KEY \u548c CSE_ID</p> Source code in <code>RumorDetect/tools/data_tools.py</code> <pre><code>def google_search(search_term, banned_url, **kwargs):\n    \"\"\"\n    \u4f7f\u7528\u8c37\u6b4c\u641c\u7d22\u63a5\u53e3\u6839\u636e\u5173\u952e\u8bcd\u641c\u7d22\u65b0\u95fb\uff0c\u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf CSE_API_KEY \u548c CSE_ID\n    \"\"\"\n    api_key = get_env(\"CSE_API_KEY\")\n    cse_id = get_env(\"CSE_ID\")\n    exclude_query = \" \".join(f\"-site:{site}\" for site in banned_url)\n    full_query = f\"{search_term} {exclude_query}\"\n    query_params = {\"q\": full_query, \"key\": api_key, \"cx\": cse_id}\n    query_params.update(kwargs)\n    response = requests.get(\n        \"https://www.googleapis.com/customsearch/v1\", params=query_params\n    )\n    google_data = response.json()\n    if \"items\" in google_data:\n        return google_data[\"items\"]\n    print(\n        f\"\u8c37\u6b4c\u641c\u7d22\u67e5\u8be2\u5931\u8d25\u3002\u8fd4\u56de\u6570\u636e\u4e3a\uff1a{google_data}\uff0cKEY\u4e3a{api_key}, CSE_ID\u4e3a{cse_id}\"\n    )\n    return []\n</code></pre>"},{"location":"reference/news/#bing-search","title":"Bing Search \u63a5\u53e3","text":"<p>               Bases: <code>BaseNewsModel</code></p> <p>\u6839\u636e Bing \u641c\u7d22\u63a5\u53e3\u67e5\u627e\u65b0\u95fb\u3002 \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1aBING_SEARCH_KEY API KEY \u83b7\u53d6\u65b9\u5f0f\u89c1\uff1ahttps://portal.azure.com/</p> Source code in <code>RumorDetect/modules/news_module.py</code> <pre><code>class BingNewsModel(BaseNewsModel):\n    '''\n        \u6839\u636e Bing \u641c\u7d22\u63a5\u53e3\u67e5\u627e\u65b0\u95fb\u3002\n        \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff1aBING_SEARCH_KEY\n        API KEY \u83b7\u53d6\u65b9\u5f0f\u89c1\uff1ahttps://portal.azure.com/\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        pass\n\n    def find_news(\n        self,\n        keyword_list: List[str],\n        keyword_limit_num: int = 8,\n        news_limit_num: int = 5,\n        banned_url: List[str] = [],\n    ) -&gt; List[Dict[str, str]]:\n        if len(keyword_list) &gt; keyword_limit_num:\n            keyword_list = keyword_list[:keyword_limit_num]\n        keyword_str = \" \".join(keyword_list)\n        bing_data = bing_search(keyword_str)\n        for data in bing_data:\n            data[\"title\"] = data[\"name\"]\n        bing_data = data_ban_url(bing_data, banned_url, news_limit_num)\n        if len(bing_data) &gt; news_limit_num:\n            bing_data = bing_data[:news_limit_num]\n        return get_news_list(bing_data)\n</code></pre> <p>\u4f7f\u7528bing\u641c\u7d22\u63a5\u53e3\u6839\u636e\u5173\u952e\u8bcd\u641c\u7d22\u65b0\u95fb\uff0c\u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf BING_SEARCH_KEY</p> Source code in <code>RumorDetect/tools/data_tools.py</code> <pre><code>def bing_search(search_term, **kwargs):\n    \"\"\"\n    \u4f7f\u7528bing\u641c\u7d22\u63a5\u53e3\u6839\u636e\u5173\u952e\u8bcd\u641c\u7d22\u65b0\u95fb\uff0c\u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf BING_SEARCH_KEY\n    \"\"\"\n    api_key = get_env(\"BING_SEARCH_KEY\")\n    headers = {\"Ocp-Apim-Subscription-Key\": api_key}\n    headers.update(kwargs)\n\n    query_params = {\"q\": search_term, \"textDecorations\": True, \"textFormat\": \"HTML\"}\n    response = requests.get(\n        \"https://api.bing.microsoft.com/v7.0/search\",\n        headers=headers,\n        params=query_params,\n    )\n    response.raise_for_status()\n    bing_data = response.json()\n    if \"webPages\" in bing_data and \"value\" in bing_data[\"webPages\"]:\n        return bing_data[\"webPages\"][\"value\"]\n    print(f\"bing\u641c\u7d22\u67e5\u8be2\u5931\u8d25\u3002\u8fd4\u56de\u6570\u636e\u4e3a\uff1a{bing_data}\uff0cKEY\u4e3a{api_key}\")\n    return []\n</code></pre>"},{"location":"reference/news/#bing","title":"Bing \u722c\u866b\u63a5\u53e3","text":"<p>               Bases: <code>BaseNewsModel</code></p> <p>\u4f7f\u7528\u722c\u866b\uff0c\u76f4\u63a5\u5411bing\u53d1\u9001request\u8bf7\u6c42\uff0c\u83b7\u53d6\u7ed3\u679c \u4e0d\u8fc7\u7531\u4e8e\u53cd\u722c\u866b\u673a\u5236\uff0c\u5f88\u591a\u65f6\u5019\u4f1a\u88ab\u62e6\u622a\uff0c\u6240\u4ee5\u4e0d\u63a8\u8350\u4f7f\u7528</p> Source code in <code>RumorDetect/modules/news_module.py</code> <pre><code>class BingSpiderNewsModel(BaseNewsModel):\n    '''\n        \u4f7f\u7528\u722c\u866b\uff0c\u76f4\u63a5\u5411bing\u53d1\u9001request\u8bf7\u6c42\uff0c\u83b7\u53d6\u7ed3\u679c\n        \u4e0d\u8fc7\u7531\u4e8e\u53cd\u722c\u866b\u673a\u5236\uff0c\u5f88\u591a\u65f6\u5019\u4f1a\u88ab\u62e6\u622a\uff0c\u6240\u4ee5\u4e0d\u63a8\u8350\u4f7f\u7528\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        pass\n\n    def find_news(\n        self,\n        keyword_list: List[str],\n        keyword_limit_num: int = 8,\n        news_limit_num: int = 5,\n        banned_url: List[str] = [],\n    ) -&gt; List[Dict[str, str]]:\n        if len(keyword_list) &gt; keyword_limit_num:\n            keyword_list = keyword_list[:keyword_limit_num]\n        keyword_str = \" \".join(keyword_list)\n        bing_data = bing_spider_search(keyword_str)\n        for data in bing_data:\n            data[\"title\"] = data[\"name\"]\n        bing_data = data_ban_url(bing_data, banned_url, news_limit_num)\n        if len(bing_data) &gt; news_limit_num:\n            bing_data = bing_data[:news_limit_num]\n        return get_news_list(bing_data)\n</code></pre> <p>\u4f7f\u7528bing\u722c\u866b\u641c\u7d22\u76f8\u5173\u65b0\u95fb</p> Source code in <code>RumorDetect/tools/data_tools.py</code> <pre><code>def bing_spider_search(search_term, **kwargs):\n    \"\"\"\n    \u4f7f\u7528bing\u722c\u866b\u641c\u7d22\u76f8\u5173\u65b0\u95fb\n    \"\"\"\n    url = \"https://www.bing.com/search\"\n    params = {\"q\": search_term}\n    response = requests.get(url, params=params)\n    result_list = []\n    if response.status_code == 200:\n        soup = BeautifulSoup(response.text, \"html.parser\")\n\n        # \u67e5\u627e\u6240\u6709\u7684\u641c\u7d22\u7ed3\u679c\u6761\u76ee\n        results = soup.find_all(\"li\", {\"class\": \"b_algo\"})\n\n        # \u904d\u5386\u6bcf\u4e2a\u7ed3\u679c\u5e76\u63d0\u53d6\u6807\u9898\u548c\u94fe\u63a5\n        for result in results:\n            result_list.append(\n                {\n                    \"title\": result.find(\"h2\").text.strip(),\n                    \"url\": result.find(\"a\")[\"href\"],\n                }\n            )\n        return result_list\n    else:\n        print(\"bing_spider Failed to retrieve the content\")\n        return []\n</code></pre>"},{"location":"reference/rumor_detect/","title":"\u4e3b\u7c7b","text":""},{"location":"reference/rumor_detect/#_1","title":"\u4e3b\u6a21\u5757","text":"<p>\u8d1f\u8d23\u8c03\u5ea6\u5176\u4ed6\u6a21\u5757\u6267\u884c \u73b0\u6709\u7684\u6a21\u5757\u53d6\u503c\uff1a</p> <ul> <li>news_mode<ul> <li>tjsx\uff1a\u5929\u805a\u6570\u884c\u7684 API \u641c\u7d22\uff0c\u9700\u914d\u7f6e\u73af\u5883\u53d8\u91cf<code>TJSX_API_KEY</code></li> <li>google\uff1agoogle \u7684 API \u641c\u7d22\uff0c\u9700\u914d\u7f6e\u73af\u5883\u53d8\u91cf<code>CSE_ID</code> \u548c <code>CSE_API_KEY</code></li> <li>bing\uff1abing \u7684 API \u641c\u7d22\uff0c\u9700\u914d\u7f6e\u73af\u5883\u53d8\u91cf<code>BING_SEARCH_KEY</code></li> <li>bing_spider\uff1abing \u7684\u722c\u866b\u641c\u7d22</li> </ul> </li> <li>summary_mode<ul> <li>pegasus\uff1aPegasus \u5929\u9a6c\u6a21\u578b\u6982\u8981</li> <li>baidu\uff1aBaidu Api \u6982\u8981\uff0c\u9700\u914d\u7f6e\u73af\u5883\u53d8\u91cf<code>BAIDU_API_KEY</code> \u548c <code>BAIDU_API_SECRET</code></li> <li>ernie_bot\uff1aErnieBot \u5927\u6a21\u578b\u6982\u8981\uff0c\u9700\u914d\u7f6e\u73af\u5883\u53d8\u91cf<code>ERNIE_BOT_KEY</code> \u548c <code>ERNIE_BOT_SECRET</code></li> </ul> </li> <li>compare_mode<ul> <li>entailment\uff1a\u8bed\u4e49\u8574\u542b\u5224\u65ad</li> <li>match\uff1a\u8bed\u4e49\u5339\u914d\u5224\u65ad</li> <li>baidu\uff1aBaidu Api \u8bed\u4e49\u5339\u914d\u5224\u65ad\uff0c\u9700\u914d\u7f6e\u73af\u5883\u53d8\u91cf<code>BAIDU_API_KEY</code> \u548c <code>BAIDU_API_SECRET</code></li> <li>ernie_bot\uff1aErnieBot \u5927\u6a21\u578b\u8bed\u4e49\u8574\u542b\u5224\u65ad\uff0c\u9700\u914d\u7f6e\u73af\u5883\u53d8\u91cf<code>ERNIE_BOT_KEY</code> \u548c <code>ERNIE_BOT_SECRET</code></li> </ul> </li> <li>judge_mode<ul> <li>cnn\uff1aCNN \u6a21\u578b\u5224\u65ad</li> <li>ernie_bot\uff1aErnieBot \u5927\u6a21\u578b\u5224\u65ad\uff0c\u9700\u914d\u7f6e\u73af\u5883\u53d8\u91cf<code>ERNIE_BOT_KEY</code> \u548c <code>ERNIE_BOT_SECRET</code></li> </ul> </li> </ul>"},{"location":"reference/rumor_detect/#rumor_detect","title":"rumor_detect","text":"<p>\u8fd9\u662f\u8fd9\u4e2a\u5305\u7684\u6838\u5fc3\u7c7b\uff0c\u7528\u4e8e\u8fdb\u884c\u8c23\u8a00\u68c0\u6d4b\u3002 \u5728\u521d\u59cb\u5316\u65f6\uff0c\u53ef\u4ee5\u6839\u636e\u914d\u7f6e\u7684\u53c2\u6570\u9009\u62e9\u662f\u5426\u81ea\u52a8\u521d\u59cb\u5316\u5404\u6a21\u5757\uff0c\u4ee5\u53ca\u662f\u5426\u5f00\u542f\u5173\u952e\u8bcd\u63d0\u53d6\u3001\u6982\u8981\u751f\u6210\u3001\u65b0\u95fb\u6bd4\u8f83\u3001\u8c23\u8a00\u5224\u65ad\u7b49\u529f\u80fd\u3002 \u4e0b\u9762\u662f\u5404\u4e2a\u53c2\u6570\u7684\u8bf4\u660e\uff1a</p> <p>Parameters:</p> Name Type Description Default <code>auto_init</code> <p>bool \u662f\u5426\u81ea\u52a8\u521d\u59cb\u5316\u5404\u6a21\u5757</p> <code>True</code> <code>enable_keyword</code> <p>bool \u662f\u5426\u5f00\u542f\u5173\u952e\u8bcd\u63d0\u53d6</p> <code>True</code> <code>enable_summary</code> <p>bool \u662f\u5426\u5f00\u542f\u6982\u8981\u751f\u6210</p> <code>True</code> <code>enable_search_compare</code> <p>bool \u662f\u5426\u5f00\u542f\u65b0\u95fb\u641c\u7d22\u6bd4\u8f83\u529f\u80fd</p> <code>True</code> <code>enable_judge</code> <p>bool \u662f\u5426\u5f00\u542f\u6a21\u578b\u8c23\u8a00\u5224\u65ad\u529f\u80fd</p> <code>True</code> <code>news_mode</code> <p>List[str] \u65b0\u95fb\u641c\u7d22\u6a21\u5f0f - google / bing / bing_spider / tjsx</p> <code>['bing']</code> <code>summary_mode</code> <p>List[str] \u6458\u8981\u751f\u6210\u6a21\u5f0f - pegasus / baidu / ernie_bot</p> <code>['ernie_bot']</code> <code>compare_mode</code> <p>List[str] \u65b0\u95fb\u6bd4\u8f83\u6a21\u5f0f - entailment / match / baidu / ernie_bot</p> <code>['entailment', 'ernie_bot']</code> <code>judge_mode</code> <p>List[str] \u8c23\u8a00\u5224\u65ad\u6a21\u5f0f - cnn / ernie_bot</p> <code>['cnn', 'ernie_bot']</code> <code>banned_url</code> <p>List[str] \u5728\u65b0\u95fb\u641c\u7d22\u4e2d\u7981\u6b62\u7684\u7f51\u7ad9 </p> <code>['zhihu', 'baijiahao']</code> <code>keyword_limit_num</code> <p>int \u5173\u952e\u8bcd\u63d0\u53d6\u7684\u6700\u5927\u6570\u91cf</p> <code>8</code> <code>news_limit_num</code> <p>int \u65b0\u95fb\u641c\u7d22\u7684\u6700\u5927\u6570\u91cf</p> <code>5</code> Source code in <code>RumorDetect/RumorDetect.py</code> <pre><code>class rumor_detect:\n    \"\"\"\n    \u8fd9\u662f\u8fd9\u4e2a\u5305\u7684\u6838\u5fc3\u7c7b\uff0c\u7528\u4e8e\u8fdb\u884c\u8c23\u8a00\u68c0\u6d4b\u3002\n    \u5728\u521d\u59cb\u5316\u65f6\uff0c\u53ef\u4ee5\u6839\u636e\u914d\u7f6e\u7684\u53c2\u6570\u9009\u62e9\u662f\u5426\u81ea\u52a8\u521d\u59cb\u5316\u5404\u6a21\u5757\uff0c\u4ee5\u53ca\u662f\u5426\u5f00\u542f\u5173\u952e\u8bcd\u63d0\u53d6\u3001\u6982\u8981\u751f\u6210\u3001\u65b0\u95fb\u6bd4\u8f83\u3001\u8c23\u8a00\u5224\u65ad\u7b49\u529f\u80fd\u3002\n    \u4e0b\u9762\u662f\u5404\u4e2a\u53c2\u6570\u7684\u8bf4\u660e\uff1a\n\n    Args:\n        auto_init : bool \u662f\u5426\u81ea\u52a8\u521d\u59cb\u5316\u5404\u6a21\u5757\n        enable_keyword : bool \u662f\u5426\u5f00\u542f\u5173\u952e\u8bcd\u63d0\u53d6\n        enable_summary : bool \u662f\u5426\u5f00\u542f\u6982\u8981\u751f\u6210\n        enable_search_compare : bool \u662f\u5426\u5f00\u542f\u65b0\u95fb\u641c\u7d22\u6bd4\u8f83\u529f\u80fd\n        enable_judge : bool \u662f\u5426\u5f00\u542f\u6a21\u578b\u8c23\u8a00\u5224\u65ad\u529f\u80fd\n        news_mode : List[str] \u65b0\u95fb\u641c\u7d22\u6a21\u5f0f - google / bing / bing_spider / tjsx\n        summary_mode : List[str] \u6458\u8981\u751f\u6210\u6a21\u5f0f - pegasus / baidu / ernie_bot\n        compare_mode : List[str] \u65b0\u95fb\u6bd4\u8f83\u6a21\u5f0f - entailment / match / baidu / ernie_bot\n        judge_mode : List[str] \u8c23\u8a00\u5224\u65ad\u6a21\u5f0f - cnn / ernie_bot\n        banned_url : List[str] \u5728\u65b0\u95fb\u641c\u7d22\u4e2d\u7981\u6b62\u7684\u7f51\u7ad9 \n        keyword_limit_num : int \u5173\u952e\u8bcd\u63d0\u53d6\u7684\u6700\u5927\u6570\u91cf\n        news_limit_num : int \u65b0\u95fb\u641c\u7d22\u7684\u6700\u5927\u6570\u91cf\n    \"\"\"\n\n    def __init__(\n        self,\n        auto_init: bool = True,\n        enable_keyword: bool = True,\n        enable_summary: bool = True,\n        enable_search_compare: bool = True,\n        enable_judge: bool = True,\n        keywords_mode: List[str] = [\"jieba\"],\n        news_mode: List[str] = [\"bing\"],\n        summary_mode: List[str] = [\"ernie_bot\"],\n        compare_mode: List[str] = [\"entailment\",\"ernie_bot\"],\n        judge_mode: List[str] = [\"cnn\",\"ernie_bot\"],\n        banned_url: List[str] = [\"zhihu\", \"baijiahao\"],\n        keyword_limit_num: int = 8,\n        news_limit_num: int = 5,\n    ):\n        load_dotenv(os.path.join(os.getcwd(), '.env'))\n        self.update_params(locals())\n        self.initialized = False\n        self.judge_initialized = False\n        self.search_compare_initialized = False\n        self.keywords_models = None\n        self.news_models = None\n        self.summary_models = None\n        self.compare_models = None\n        self.judge_models = None\n        self.keywords = []\n        self.news_list = []\n        self.sent = \"\"\n        self.compare_result = []\n        self.judge_result = []\n        self.lab = [\"\u8c23\u8a00\", \"\u975e\u8c23\u8a00\"]\n\n        if len(self.summary_mode) &gt; 1:\n            print(\"\u6982\u8981\u6a21\u5757\u53ea\u652f\u6301\u5355\u4e00\u6a21\u5f0f\uff0c\u5df2\u81ea\u52a8\u9009\u62e9\u7b2c\u4e00\u4e2a\u6a21\u5f0f\")\n            self.summary_mode = [self.summary_mode[0]]\n\n        self.keywords_dict = {\n            \"jieba\": JiebaKeywordsModule,  # \u4f7f\u7528jieba\u63d0\u53d6\u5173\u952e\u8bcd\n        }\n\n        self.news_dict = {  # \u591a\u79cd\u65b0\u95fb\u641c\u7d22\u65b9\u5f0f\n            \"google\": GoogleNewsModel,  # google api\u641c\u7d22\n            \"bing\": BingNewsModel,  # bing api\u641c\u7d22\n            \"bing_spider\": BingSpiderNewsModel,  # bing\u722c\u866b\u641c\u7d22\n            \"tjsx\": TJSXNewsModel,  # \u5929\u805a\u6570\u884cAPI\n        }\n\n        self.summary_dict = {  # \u591a\u79cd\u6458\u8981\u65b9\u5f0f\n            \"pegasus\": PegasusSummaryModel,  # \u5929\u9a6c\u6a21\u578b\n            \"baidu\": BaiduSummaryModel,  # \u4f7f\u7528\u767e\u5ea6API\u8fdb\u884c\u6982\u8ff0\n            \"ernie_bot\": ErnieBotSummaryModel,  # \u4f7f\u7528\u767e\u5ea6ernie\u5927\u6a21\u578b\u8fdb\u884c\u6982\u8ff0\n        }\n\n        self.compare_dict = {  # \u591a\u79cd\u65b0\u95fb\u6bd4\u8f83\u65b9\u5f0f\n            \"entailment\": EntailmentCompareModel,  # \u8bed\u4e49\u8574\u542b\n            \"match\": MatchingCompareModel,  # \u8bed\u4e49\u5339\u914d\n            \"baidu\": BaiduCompareModel,  # \u4f7f\u7528\u767e\u5ea6API\u8fdb\u884c\u6bd4\u8f83(\u6700\u5927\u652f\u6301512\u5b57\u8282)\n            \"ernie_bot\": ErnieBotCompareModel,  # \u4f7f\u7528\u767e\u5ea6ernie\u5927\u6a21\u578b\u8fdb\u884c\u6bd4\u8f83\n        }\n\n        self.judge_dict = {  # \u591a\u79cd\u6a21\u578b\u5224\u65ad\u65b9\u5f0f\n            \"cnn\": CNNJudgeModel,  # CNN\u6a21\u578b\n            \"ernie_bot\": ErnieBotJudgeModel,  # \u4f7f\u7528\u767e\u5ea6ernie\u5927\u6a21\u578b\u8fdb\u884c\u5224\u65ad\n        }\n\n        if self.auto_init:\n            self.init()\n\n    def update_params(self, params: Dict[str, str]):\n        for key, value in params.items():\n            if key != \"self\":\n                self.__setattr__(key, value)\n\n    # \u521d\u59cb\u5316\u5404\u6a21\u5757\n    def init(self):\n        # \u641c\u7d22\u76f8\u5173\u65b0\u95fb\u5e76\u6bd4\u8f83\u7684\u521d\u59cb\u5316\n        if self.enable_search_compare and not self.search_compare_initialized:\n            self.keywords_init()\n            self.news_init()\n            if self.enable_summary:\n                self.summary_init()\n            self.compare_init()\n            self.search_compare_initialized = True\n        # \u53ea\u4f7f\u7528\u7b97\u6cd5\u6a21\u578b\u8fdb\u884cjudge\u662f\u5426\u662f\u8c23\u8a00\u7684\u521d\u59cb\u5316\n        if self.enable_judge and not self.judge_initialized:\n            self.judge_init()\n            self.judge_initialized = True\n\n        self.initialized = True\n\n\n    def run(self, sent):\n        '''\n            \u8fd0\u884c\u8c23\u8a00\u68c0\u6d4b\u6a21\u578b\n        '''\n        if not self.initialized or not self.search_compare_initialized or not self.judge_initialized:\n            print(\"\u672a\u521d\u59cb\u5316,\u6b63\u5728\u6309\u5404\u6a21\u5757\u7684 mode \u914d\u7f6e\u521d\u59cb\u5316\")\n            self.init()\n        self.sent = sent\n        self.final_score = []\n        self.keywords = []\n        if self.enable_search_compare:\n            if self.enable_keyword:\n                for keywords_model in self.keywords_models:\n                    self.keywords.extend(keywords_model.get_keywords(self.sent))\n            else:\n                self.keywords = [self.sent]\n            print(f\"\u5173\u952e\u5b57\u4e3a{self.keywords}\")\n            self.news_list = []\n            for news_model in self.news_models:\n                self.news_list.extend(\n                    news_model.find_news(\n                        self.keywords,\n                        self.keyword_limit_num,\n                        self.news_limit_num,\n                        self.banned_url,\n                    )\n                )\n            if not self.news_list:\n                print(\"\u672a\u627e\u5230\u76f8\u5173\u65b0\u95fb\")\n            else:\n                if self.enable_summary:\n                    self.sent, self.news_list = self.summary_models[0].get_summary(\n                        self.sent, self.news_list\n                    )\n                print(self.news_list)\n                self.compare_result = []\n                for compare_model in self.compare_models:\n                    self.compare_result.append(\n                        (compare_model.compare(self.sent, self.news_list))\n                    )\n                self.compare_result = (\n                    self.aggregate_compare_result()\n                )  # \u5c06\u6240\u6709\u6a21\u578b\u7684\u7ed3\u679c\u805a\u5408\n                print(\"search_compare\u7ed3\u679c\u5982\u4e0b\uff1a\")\n                print(\n                    tabulate.tabulate(\n                        self.compare_result, headers=\"keys\", tablefmt=\"grid\"\n                    )\n                )\n                self.final_score.extend([compare_result[\"final_score\"] for compare_result in self.compare_result])\n        if self.enable_judge:\n            self.judge_result = []\n            for judge_model in self.judge_models:\n                self.judge_result.append(judge_model.judge(self.sent))\n            self.judge_result = self.aggregate_judge_result()  # \u5c06\u6240\u6709\u6a21\u578b\u7684\u7ed3\u679c\u805a\u5408\n            print(\"judge\u7ed3\u679c\u5982\u4e0b\uff1a\")\n            print(tabulate.tabulate(self.judge_result, headers=\"keys\", tablefmt=\"grid\"))\n            self.final_score.extend([judge_result[\"finalscore\"] for judge_result in self.judge_result])\n        final_score = power_mean(self.final_score)\n        print(f\"\u6700\u7ec8\u7f6e\u4fe1\u5ea6\u4e3a{final_score},\u7ed3\u679c\u4e3a{self.lab[final_score &gt; 0.6]}\")\n        return {\"score\":final_score, \"result\":self.lab[final_score &gt; 0.6]}\n\n    def debug_run(self, sent):\n        '''\n            Debug\u6a21\u5f0f\u8fd0\u884c Search_compare\u529f\u80fd\uff0c\u4ee5\u8fed\u4ee3\u5668\u7684\u65b9\u5f0f\u6267\u884c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u67e5\u770b\u548c\u4fee\u6539\u4e2d\u95f4\u53d8\u91cf\n        '''\n        self.sent = sent\n        self.final_score = []\n        self.keywords = []\n        if not self.enable_search_compare:\n            print(\"Debug\u6a21\u5f0f\u53ea\u652f\u6301\u65b0\u95fb\u6bd4\u8f83\u529f\u80fd\uff0c\u5f53\u524d\u8be5\u529f\u80fd\u672a\u5f00\u542f\")\n            return\n        if not self.initialized:\n            print(\"\u672a\u521d\u59cb\u5316,\u6b63\u5728\u6309\u5404\u6a21\u5757\u7684 mode \u914d\u7f6e\u521d\u59cb\u5316\")\n            self.init()\n\n        if self.enable_keyword:\n            for keywords_model in self.keywords_models:\n                self.keywords.extend(keywords_model.get_keywords(self.sent))\n        else:\n            self.keywords = [self.sent]\n        print(\n            \"\u5173\u952e\u8bcd\u641c\u7d22\u5b8c\u6bd5\u3002\u67e5\u770b\u6216\u4fee\u6539\u4e2d\u95f4\u53d8\u91cf\u8bf7\u4f7f\u7528\u51fd\u6570 self.get_intermediate() \u548c self.update_params(key, value)\"\n        )\n        yield {\"result\":\"\u529f\u80fd\u672a\u7ed3\u675f\"}\n        self.news_list = []\n        for news_model in self.news_models:\n            self.news_list.extend(\n                news_model.find_news(\n                    self.keywords,\n                    self.keyword_limit_num,\n                    self.news_limit_num,\n                    self.banned_url,\n                )\n            )\n        print(\n            \"\u65b0\u95fb\u641c\u7d22\u5b8c\u6bd5.\u67e5\u770b\u6216\u4fee\u6539\u4e2d\u95f4\u53d8\u91cf\u8bf7\u4f7f\u7528\u51fd\u6570 self.get_intermediate() \u548c self.update_params(key, value)\"\n        )\n        yield {\"result\":\"\u529f\u80fd\u672a\u7ed3\u675f\"}\n        if self.enable_summary:\n            self.sent, self.news_list = self.summary_models[0].get_summary(\n                self.sent, self.news_list\n            )\n        print(\n            \"\u6982\u8981\u5b8c\u6bd5.\u67e5\u770b\u6216\u4fee\u6539\u4e2d\u95f4\u53d8\u91cf\u8bf7\u4f7f\u7528\u51fd\u6570 self.get_intermediate() \u548c self.update_params(key, value)\"\n        )\n        print(\"\u518d\u6b21\u8fd0\u884c\u5373\u4e3a\u6700\u7ec8\u7ed3\u679c\")\n        yield {\"result\":\"\u529f\u80fd\u672a\u7ed3\u675f\"}\n        self.compare_result = []\n        for compare_model in self.compare_models:\n            self.compare_result.append(\n                (compare_model.compare(self.sent, self.news_list))\n            )\n        self.compare_result = self.aggregate_compare_result()  # \u5c06\u6240\u6709\u6a21\u578b\u7684\u7ed3\u679c\u805a\u5408\n        print(\"search_compare\u7ed3\u679c\u5982\u4e0b\uff1a\")\n        print(tabulate.tabulate(self.compare_result, headers=\"keys\", tablefmt=\"grid\"))\n        print(\"\u6bd4\u8f83\u5b8c\u6bd5.\")\n        self.final_score = [compare_result[\"final_score\"] for compare_result in self.compare_result]\n        final_score = power_mean(self.final_score)\n        print(f\"\u6700\u7ec8\u7f6e\u4fe1\u5ea6\u4e3a{final_score},\u7ed3\u679c\u4e3a{self.lab[final_score &gt; 0.6]}\")\n\n        yield {\"score\":final_score, \"result\":self.lab[final_score &gt; 0.6]}\n\n    # \u805a\u5408 search_compare \u529f\u80fd\u4e2d\u591a\u4e2a compare \u51fd\u6570\u7684\u7ed3\u679c\n    def aggregate_compare_result(self):\n        result = [\n            {\n                \"source\": values[0][\"source\"],\n                \"news\": values[0][\"news\"],\n                \"news_url\": values[0][\"news_url\"],\n                \"scores\": dict(\n                    zip(self.compare_mode, [value[\"score\"] for value in values])\n                ),\n                \"final_score\": power_mean([value[\"score\"] for value in values]),\n                \"predict\": self.lab[\n                    power_mean([value[\"score\"] for value in values]) &gt; 0.6\n                ],\n            }\n            for values in zip(*self.compare_result)\n        ]\n        return result\n\n    # \u805a\u5408 judge \u529f\u80fd\u4e2d\u591a\u4e2a judge \u51fd\u6570\u7684\u7ed3\u679c\n    def aggregate_judge_result(self):\n        result = [\n            {\n                \"source\": self.judge_result[0][\"source\"],\n                \"scores\": dict(\n                    zip(self.judge_mode, [x[\"score\"] for x in self.judge_result])\n                ),\n                \"finalscore\": power_mean([x[\"score\"] for x in self.judge_result]),\n                \"predict\": self.lab[\n                    power_mean([x[\"score\"] for x in self.judge_result]) &gt; 0.6\n                ],\n            }\n        ]\n        return result\n\n    # \u83b7\u53d6\u4e2d\u95f4\u53d8\u91cf\n    def get_intermediate(self):\n        return {\n            \"sent\": self.sent,\n            \"news_list\": self.news_list,\n            \"keywords\": self.keywords,\n        }\n\n    def keywords_init(self):\n        self.keywords_models = [self.keywords_dict[key]() for key in self.keywords_mode]\n\n    def news_init(self):\n        self.news_models = [self.news_dict[news_mode]() for news_mode in self.news_mode]\n\n    def summary_init(self):\n        self.summary_models = [self.summary_dict[self.summary_mode[0]]()]\n\n    def compare_init(self):\n        self.compare_models = [\n            self.compare_dict[compare_mode]() for compare_mode in self.compare_mode\n        ]\n\n    def judge_init(self):\n        self.judge_models = [\n            self.judge_dict[judge_mode]() for judge_mode in self.judge_mode\n        ]\n\n    def list_available_keywords_mode(self):\n        return list(self.keywords_dict.keys())\n\n    def list_available_news_mode(self):\n        return list(self.news_dict.keys())\n\n    def list_available_summary_mode(self):\n        return list(self.summary_dict.keys())\n\n    def list_available_compare_mode(self):\n        return list(self.compare_dict.keys())\n\n    def list_available_judge_mode(self):\n        return list(self.judge_dict.keys())\n\n    def add_keywords_mode(self, key, value):\n        if issubclass(value, BaseKeywordsModel):\n            self.keywords_dict[key] = value\n        else:\n            print(\"\u8bf7\u4f20\u5165\u6b63\u786e\u7684\u5173\u952e\u8bcd\u6a21\u578b\uff0c\u5fc5\u987b\u662fBaseKeywordsModel\u7684\u5b50\u7c7b\")\n\n    def add_news_mode(self, key, value):\n        if issubclass(value, BaseNewsModel):\n            self.news_dict[key] = value\n        else:\n            print(\"\u8bf7\u4f20\u5165\u6b63\u786e\u7684\u65b0\u95fb\u6a21\u578b\uff0c\u5fc5\u987b\u662fBaseNewsModel\u7684\u5b50\u7c7b\")\n\n    def add_summary_mode(self, key, value):\n        if issubclass(value, BaseSummaryModel):\n            self.summary_dict[key] = value\n        else:\n            print(\"\u8bf7\u4f20\u5165\u6b63\u786e\u7684\u6982\u8ff0\u6a21\u578b\uff0c\u5fc5\u987b\u662fBaseSummaryModel\u7684\u5b50\u7c7b\")\n\n    def add_compare_mode(self, key, value):\n        if issubclass(value, BaseCompareModel):\n            self.compare_dict[key] = value\n        else:\n            print(\"\u8bf7\u4f20\u5165\u6b63\u786e\u7684\u6bd4\u8f83\u6a21\u578b\uff0c\u5fc5\u987b\u662fBaseCompareModel\u7684\u5b50\u7c7b\")\n\n    def add_judge_mode(self, key, value):\n        if issubclass(value, BaseJudgeModel):\n            self.judge_dict[key] = value\n        else:\n            print(\"\u8bf7\u4f20\u5165\u6b63\u786e\u7684\u5224\u65ad\u6a21\u578b\uff0c\u5fc5\u987b\u662fBaseJudgeModel\u7684\u5b50\u7c7b\")\n\n    def set_keywords_mode(self, mode: List[str]):\n        if Counter(mode) != Counter(self.keywords_mode):\n            self.search_compare_initialized = False\n        self.keywords_mode = mode\n\n    def set_news_mode(self, mode: List[str]):\n        if Counter(mode) != Counter(self.news_mode):\n            self.search_compare_initialized = False\n        self.news_mode = mode\n\n    def set_summary_mode(self, mode: List[str]):\n        if Counter(mode) != Counter(self.summary_mode):\n            self.search_compare_initialized = False\n        self.summary_mode = mode\n\n    def set_compare_mode(self, mode: List[str]):\n        if Counter(mode) != self.compare_mode:\n            self.search_compare_initialized = False\n        self.compare_mode = mode\n\n    def set_judge_mode(self, mode: List[str]):\n        if Counter(mode) != Counter(self.judge_mode):\n            self.judge_initialized = False\n        self.judge_mode = mode\n\n    def get_keywords_mode(self):\n        return self.keywords_mode\n\n    def get_news_mode(self):\n        return self.news_mode\n\n    def get_summary_mode(self):\n        return self.summary_mode\n\n    def get_compare_mode(self):\n        return self.compare_mode\n\n    def get_judge_mode(self):\n        return self.judge_mode\n</code></pre>"},{"location":"reference/rumor_detect/#RumorDetect.RumorDetect.rumor_detect.debug_run","title":"<code>debug_run(sent)</code>","text":"<p>Debug\u6a21\u5f0f\u8fd0\u884c Search_compare\u529f\u80fd\uff0c\u4ee5\u8fed\u4ee3\u5668\u7684\u65b9\u5f0f\u6267\u884c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u67e5\u770b\u548c\u4fee\u6539\u4e2d\u95f4\u53d8\u91cf</p> Source code in <code>RumorDetect/RumorDetect.py</code> <pre><code>def debug_run(self, sent):\n    '''\n        Debug\u6a21\u5f0f\u8fd0\u884c Search_compare\u529f\u80fd\uff0c\u4ee5\u8fed\u4ee3\u5668\u7684\u65b9\u5f0f\u6267\u884c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u67e5\u770b\u548c\u4fee\u6539\u4e2d\u95f4\u53d8\u91cf\n    '''\n    self.sent = sent\n    self.final_score = []\n    self.keywords = []\n    if not self.enable_search_compare:\n        print(\"Debug\u6a21\u5f0f\u53ea\u652f\u6301\u65b0\u95fb\u6bd4\u8f83\u529f\u80fd\uff0c\u5f53\u524d\u8be5\u529f\u80fd\u672a\u5f00\u542f\")\n        return\n    if not self.initialized:\n        print(\"\u672a\u521d\u59cb\u5316,\u6b63\u5728\u6309\u5404\u6a21\u5757\u7684 mode \u914d\u7f6e\u521d\u59cb\u5316\")\n        self.init()\n\n    if self.enable_keyword:\n        for keywords_model in self.keywords_models:\n            self.keywords.extend(keywords_model.get_keywords(self.sent))\n    else:\n        self.keywords = [self.sent]\n    print(\n        \"\u5173\u952e\u8bcd\u641c\u7d22\u5b8c\u6bd5\u3002\u67e5\u770b\u6216\u4fee\u6539\u4e2d\u95f4\u53d8\u91cf\u8bf7\u4f7f\u7528\u51fd\u6570 self.get_intermediate() \u548c self.update_params(key, value)\"\n    )\n    yield {\"result\":\"\u529f\u80fd\u672a\u7ed3\u675f\"}\n    self.news_list = []\n    for news_model in self.news_models:\n        self.news_list.extend(\n            news_model.find_news(\n                self.keywords,\n                self.keyword_limit_num,\n                self.news_limit_num,\n                self.banned_url,\n            )\n        )\n    print(\n        \"\u65b0\u95fb\u641c\u7d22\u5b8c\u6bd5.\u67e5\u770b\u6216\u4fee\u6539\u4e2d\u95f4\u53d8\u91cf\u8bf7\u4f7f\u7528\u51fd\u6570 self.get_intermediate() \u548c self.update_params(key, value)\"\n    )\n    yield {\"result\":\"\u529f\u80fd\u672a\u7ed3\u675f\"}\n    if self.enable_summary:\n        self.sent, self.news_list = self.summary_models[0].get_summary(\n            self.sent, self.news_list\n        )\n    print(\n        \"\u6982\u8981\u5b8c\u6bd5.\u67e5\u770b\u6216\u4fee\u6539\u4e2d\u95f4\u53d8\u91cf\u8bf7\u4f7f\u7528\u51fd\u6570 self.get_intermediate() \u548c self.update_params(key, value)\"\n    )\n    print(\"\u518d\u6b21\u8fd0\u884c\u5373\u4e3a\u6700\u7ec8\u7ed3\u679c\")\n    yield {\"result\":\"\u529f\u80fd\u672a\u7ed3\u675f\"}\n    self.compare_result = []\n    for compare_model in self.compare_models:\n        self.compare_result.append(\n            (compare_model.compare(self.sent, self.news_list))\n        )\n    self.compare_result = self.aggregate_compare_result()  # \u5c06\u6240\u6709\u6a21\u578b\u7684\u7ed3\u679c\u805a\u5408\n    print(\"search_compare\u7ed3\u679c\u5982\u4e0b\uff1a\")\n    print(tabulate.tabulate(self.compare_result, headers=\"keys\", tablefmt=\"grid\"))\n    print(\"\u6bd4\u8f83\u5b8c\u6bd5.\")\n    self.final_score = [compare_result[\"final_score\"] for compare_result in self.compare_result]\n    final_score = power_mean(self.final_score)\n    print(f\"\u6700\u7ec8\u7f6e\u4fe1\u5ea6\u4e3a{final_score},\u7ed3\u679c\u4e3a{self.lab[final_score &gt; 0.6]}\")\n\n    yield {\"score\":final_score, \"result\":self.lab[final_score &gt; 0.6]}\n</code></pre>"},{"location":"reference/rumor_detect/#RumorDetect.RumorDetect.rumor_detect.run","title":"<code>run(sent)</code>","text":"<p>\u8fd0\u884c\u8c23\u8a00\u68c0\u6d4b\u6a21\u578b</p> Source code in <code>RumorDetect/RumorDetect.py</code> <pre><code>def run(self, sent):\n    '''\n        \u8fd0\u884c\u8c23\u8a00\u68c0\u6d4b\u6a21\u578b\n    '''\n    if not self.initialized or not self.search_compare_initialized or not self.judge_initialized:\n        print(\"\u672a\u521d\u59cb\u5316,\u6b63\u5728\u6309\u5404\u6a21\u5757\u7684 mode \u914d\u7f6e\u521d\u59cb\u5316\")\n        self.init()\n    self.sent = sent\n    self.final_score = []\n    self.keywords = []\n    if self.enable_search_compare:\n        if self.enable_keyword:\n            for keywords_model in self.keywords_models:\n                self.keywords.extend(keywords_model.get_keywords(self.sent))\n        else:\n            self.keywords = [self.sent]\n        print(f\"\u5173\u952e\u5b57\u4e3a{self.keywords}\")\n        self.news_list = []\n        for news_model in self.news_models:\n            self.news_list.extend(\n                news_model.find_news(\n                    self.keywords,\n                    self.keyword_limit_num,\n                    self.news_limit_num,\n                    self.banned_url,\n                )\n            )\n        if not self.news_list:\n            print(\"\u672a\u627e\u5230\u76f8\u5173\u65b0\u95fb\")\n        else:\n            if self.enable_summary:\n                self.sent, self.news_list = self.summary_models[0].get_summary(\n                    self.sent, self.news_list\n                )\n            print(self.news_list)\n            self.compare_result = []\n            for compare_model in self.compare_models:\n                self.compare_result.append(\n                    (compare_model.compare(self.sent, self.news_list))\n                )\n            self.compare_result = (\n                self.aggregate_compare_result()\n            )  # \u5c06\u6240\u6709\u6a21\u578b\u7684\u7ed3\u679c\u805a\u5408\n            print(\"search_compare\u7ed3\u679c\u5982\u4e0b\uff1a\")\n            print(\n                tabulate.tabulate(\n                    self.compare_result, headers=\"keys\", tablefmt=\"grid\"\n                )\n            )\n            self.final_score.extend([compare_result[\"final_score\"] for compare_result in self.compare_result])\n    if self.enable_judge:\n        self.judge_result = []\n        for judge_model in self.judge_models:\n            self.judge_result.append(judge_model.judge(self.sent))\n        self.judge_result = self.aggregate_judge_result()  # \u5c06\u6240\u6709\u6a21\u578b\u7684\u7ed3\u679c\u805a\u5408\n        print(\"judge\u7ed3\u679c\u5982\u4e0b\uff1a\")\n        print(tabulate.tabulate(self.judge_result, headers=\"keys\", tablefmt=\"grid\"))\n        self.final_score.extend([judge_result[\"finalscore\"] for judge_result in self.judge_result])\n    final_score = power_mean(self.final_score)\n    print(f\"\u6700\u7ec8\u7f6e\u4fe1\u5ea6\u4e3a{final_score},\u7ed3\u679c\u4e3a{self.lab[final_score &gt; 0.6]}\")\n    return {\"score\":final_score, \"result\":self.lab[final_score &gt; 0.6]}\n</code></pre>"},{"location":"reference/rumor_detect/#_2","title":"\u5e38\u7528\u5de5\u5177\u51fd\u6570","text":""},{"location":"reference/rumor_detect/#_3","title":"\u83b7\u53d6\u73af\u5883\u53d8\u91cf","text":"<p>\u8fd4\u56de\u73af\u5883\u53d8\u91cf\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u4e14\u6ca1\u6709\u9ed8\u8ba4\u503c\u5219\u629b\u51fa\u5f02\u5e38\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>\u73af\u5883\u53d8\u91cf\u540d</p> required <code>default</code> <code>str</code> <p>\u9ed8\u8ba4\u503c</p> <code>None</code> Source code in <code>RumorDetect/component.py</code> <pre><code>def get_env(key: str, default: str=None):\n    '''\n    \u8fd4\u56de\u73af\u5883\u53d8\u91cf\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u4e14\u6ca1\u6709\u9ed8\u8ba4\u503c\u5219\u629b\u51fa\u5f02\u5e38\u3002\n\n    Args:\n        key: \u73af\u5883\u53d8\u91cf\u540d\n        default: \u9ed8\u8ba4\u503c\n    '''\n    res = os.environ.get(key)\n    if res is None:\n        res = default\n        if res is None:\n            raise EnvironmentError(f\"\u73af\u5883\u53d8\u91cf {key} \u672a\u8bbe\u7f6e\")\n    return res\n</code></pre>"},{"location":"reference/rumor_detect/#_4","title":"\u4e0b\u8f7d\u5e76\u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55","text":"<p>\u5c06\u6587\u4ef6\u6d41\u5f0f\u4e0b\u8f7d\u5230path\u76ee\u5f55\uff0c\u5982\u679c\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u8df3\u8fc7\u3002\u5982\u679c\u6587\u4ef6\u662fzip\u683c\u5f0f\u5219\u89e3\u538b\u3002</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>\u4fdd\u5b58\u8def\u5f84</p> required <code>url</code> <code>str</code> <p>\u4e0b\u8f7d\u94fe\u63a5</p> required Source code in <code>RumorDetect/component.py</code> <pre><code>def check_and_download(path: str, url: str):\n    '''\n        \u5c06\u6587\u4ef6\u6d41\u5f0f\u4e0b\u8f7d\u5230path\u76ee\u5f55\uff0c\u5982\u679c\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u8df3\u8fc7\u3002\u5982\u679c\u6587\u4ef6\u662fzip\u683c\u5f0f\u5219\u89e3\u538b\u3002\n\n        Args:\n            path: \u4fdd\u5b58\u8def\u5f84\n            url: \u4e0b\u8f7d\u94fe\u63a5\n    '''\n    if not os.path.exists(path):\n        print(f\"\u6587\u4ef6 {path} \u4e0d\u5b58\u5728\uff0c\u6b63\u5728\u4e0b\u8f7d...\")\n        # \u53d1\u9001GET\u8bf7\u6c42\n        response = requests.get(url, stream=True)\n        # \u786e\u4fdd\u8bf7\u6c42\u6210\u529f\n        response.raise_for_status()\n        total_size = int(response.headers.get(\"content-length\", 0))\n        if url.endswith(\".zip\"):\n            with open(path + \".zip\", \"wb\") as f, tqdm(\n                desc=path + \".zip\",\n                total=total_size,\n                unit=\"iB\",\n                unit_scale=True,\n                unit_divisor=1024,\n            ) as bar:\n                for data in response.iter_content(chunk_size=1024):\n                    size = f.write(data)\n                    bar.update(size)\n            print(\"\u89e3\u538b\u4e2d\")\n            shutil.unpack_archive(\n                filename=path + \".zip\", extract_dir=path, format=\"zip\"\n            )\n        else:\n            with open(path, \"wb\") as f, tqdm(\n                desc=path,\n                total=total_size,\n                unit=\"iB\",\n                unit_scale=True,\n                unit_divisor=1024,\n            ) as bar:\n                for data in response.iter_content(chunk_size=1024):\n                    size = f.write(data)\n                    bar.update(size)\n        print(f\"\u4e0b\u8f7d\u5b8c\u6210\uff0c\u6587\u4ef6\u5df2\u4fdd\u5b58\u5230 {path}\")\n    else:\n        print(f\"\u6587\u4ef6 {path} \u5df2\u5b58\u5728\uff0c\u65e0\u9700\u4e0b\u8f7d\u3002\")\n</code></pre>"},{"location":"reference/rumor_detect/#_5","title":"\u83b7\u53d6\u9ed8\u8ba4\u4e0b\u8f7d\u76ee\u5f55","text":"<p>\u6839\u636e\u64cd\u4f5c\u7cfb\u7edf\u786e\u5b9a\u9ed8\u8ba4\u7684\u4e0b\u8f7d\u8def\u5f84 \u9ed8\u8ba4\u4e3a$HOME/tmp</p> Source code in <code>RumorDetect/component.py</code> <pre><code>def get_default_path():\n    \"\"\"\n    \u6839\u636e\u64cd\u4f5c\u7cfb\u7edf\u786e\u5b9a\u9ed8\u8ba4\u7684\u4e0b\u8f7d\u8def\u5f84\n    \u9ed8\u8ba4\u4e3a$HOME/tmp\n    \"\"\"\n    if os.name == \"nt\":  # Windows\u7cfb\u7edf\n        # \u4f7f\u7528Pathlib\u5904\u7406\u8def\u5f84\uff0c\u83b7\u53d6\u9ed8\u8ba4\u7684\u4e0b\u8f7d\u76ee\u5f55\n        download_path = Path.home() / \"tmp\"\n    elif os.name == \"posix\":  # Unix-like\u7cfb\u7edf\uff0c\u5982Linux\n        # \u540c\u6837\u4f7f\u7528Pathlib\u5904\u7406\u8def\u5f84\n        download_path = Path.home() / \"tmp\"\n    else:\n        # \u5bf9\u4e8e\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u8def\u5f84\u6216\u629b\u51fa\u9519\u8bef\n        raise NotImplementedError(\"Unsupported operating system.\")\n    return download_path\n</code></pre>"},{"location":"reference/summary/","title":"\u6587\u672c\u6982\u8ff0","text":""},{"location":"reference/summary/#_1","title":"\u65b0\u95fb\u6982\u8ff0\u6a21\u5757","text":""},{"location":"reference/summary/#_2","title":"\u57fa\u7c7b","text":"<p>\u8fd9\u662f\u65b0\u95fb\u6982\u8981\u6a21\u5757\u7684\u57fa\u7c7b\u3002\u7528\u6237\u9700\u8981\u57fa\u4e8e\u8be5\u57fa\u7c7b\u5b9e\u73b0\u81ea\u5df1\u7684\u65b0\u95fb\u6982\u8981\u6a21\u5757\u3002 \u8be5\u7c7b\u7684\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a 1. init() -&gt; None: \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u578b\u3002 2. get_summary(self, sent : str, news_list:List[Tuple]) -&gt; Tuple[str, List[Tuple]]</p> Source code in <code>RumorDetect/model.py</code> <pre><code>class BaseSummaryModel:\n    \"\"\"\n    \u8fd9\u662f\u65b0\u95fb\u6982\u8981\u6a21\u5757\u7684\u57fa\u7c7b\u3002\u7528\u6237\u9700\u8981\u57fa\u4e8e\u8be5\u57fa\u7c7b\u5b9e\u73b0\u81ea\u5df1\u7684\u65b0\u95fb\u6982\u8981\u6a21\u5757\u3002\n    \u8be5\u7c7b\u7684\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a\n    1. **init()** -&gt; None: \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u6a21\u578b\u3002\n    2. **get_summary**(self, sent : str, news_list:List[Tuple]) -&gt; Tuple[str, List[Tuple]]\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        raise NotImplementedError()\n\n    def get_summary(self, sent: str, news_list: List[Tuple]) -&gt; Tuple[str, List[Tuple]]:\n        \"\"\"\n        \u8be5\u65b9\u6cd5\u7528\u4e8e\u65b0\u95fb\u6982\u8981\u3002\n\n        Args:\n            sent: \u539f\u5fae\u535a\u6587\u672c\n            news_list: \u539f\u65b0\u95fb\u5217\u8868\n\n        Returns:\n            \u8fd4\u56de\u4e00\u4e2a Tuple\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u539f\u6587\u672c\u7684 summary \uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u9010\u4e00 summary \u540e\u7684\u65b0\u95fb\u5217\u8868\n        \"\"\"\n        raise NotImplementedError()\n</code></pre>"},{"location":"reference/summary/#RumorDetect.model.BaseSummaryModel.get_summary","title":"<code>get_summary(sent, news_list)</code>","text":"<p>\u8be5\u65b9\u6cd5\u7528\u4e8e\u65b0\u95fb\u6982\u8981\u3002</p> <p>Parameters:</p> Name Type Description Default <code>sent</code> <code>str</code> <p>\u539f\u5fae\u535a\u6587\u672c</p> required <code>news_list</code> <code>List[Tuple]</code> <p>\u539f\u65b0\u95fb\u5217\u8868</p> required <p>Returns:</p> Type Description <code>Tuple[str, List[Tuple]]</code> <p>\u8fd4\u56de\u4e00\u4e2a Tuple\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u539f\u6587\u672c\u7684 summary \uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u9010\u4e00 summary \u540e\u7684\u65b0\u95fb\u5217\u8868</p> Source code in <code>RumorDetect/model.py</code> <pre><code>def get_summary(self, sent: str, news_list: List[Tuple]) -&gt; Tuple[str, List[Tuple]]:\n    \"\"\"\n    \u8be5\u65b9\u6cd5\u7528\u4e8e\u65b0\u95fb\u6982\u8981\u3002\n\n    Args:\n        sent: \u539f\u5fae\u535a\u6587\u672c\n        news_list: \u539f\u65b0\u95fb\u5217\u8868\n\n    Returns:\n        \u8fd4\u56de\u4e00\u4e2a Tuple\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u539f\u6587\u672c\u7684 summary \uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u9010\u4e00 summary \u540e\u7684\u65b0\u95fb\u5217\u8868\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"reference/summary/#_3","title":"\u9ed8\u8ba4\u63d0\u4f9b\u7684\u4e00\u4e9b\u6d3e\u751f\u7c7b","text":""},{"location":"reference/summary/#pegasus","title":"\u4f7f\u7528 Pegasus \u5929\u9a6c\u6a21\u578b\u8fdb\u884c\u6982\u8ff0","text":"<p>               Bases: <code>BaseSummaryModel</code></p> <p>\u6839\u636e Pegasus \u5929\u9a6c\u6a21\u578b\u8fdb\u884c\u65b0\u95fb\u6982\u8981\u3002 \u8be5\u6a21\u578b\u6743\u91cd\u4f1a\u81ea\u52a8\u4e0b\u8f7d\u5230{HOME}/pegasus_checkpoints\u3002\uff08\u8be5\u6a21\u578b\u5927\u5c0f\u7ea6\u4e3a1.2G\uff09 \u9700\u8981\u6ce8\u610f\u76ee\u524d\u7531\u9ed8\u8ba4\u6743\u91cd\u751f\u6210\u7684\u6982\u8981\u8d28\u91cf\u4e0d\u662f\u7279\u522b\u7a33\u5b9a\u3002</p> Source code in <code>RumorDetect/modules/summary_module.py</code> <pre><code>class PegasusSummaryModel(BaseSummaryModel):\n    '''\n        \u6839\u636e Pegasus \u5929\u9a6c\u6a21\u578b\u8fdb\u884c\u65b0\u95fb\u6982\u8981\u3002\n        \u8be5\u6a21\u578b\u6743\u91cd\u4f1a\u81ea\u52a8\u4e0b\u8f7d\u5230{HOME}/pegasus_checkpoints\u3002\uff08\u8be5\u6a21\u578b\u5927\u5c0f\u7ea6\u4e3a1.2G\uff09\n        \u9700\u8981\u6ce8\u610f\u76ee\u524d\u7531\u9ed8\u8ba4\u6743\u91cd\u751f\u6210\u7684\u6982\u8981\u8d28\u91cf\u4e0d\u662f\u7279\u522b\u7a33\u5b9a\u3002\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        path = f\"{get_default_path()}/pegasus_checkpoints\"\n        url = \"https://github.com/mikku39/rumor-detect/releases/download/v0.0.1/pegasus_checkpoints.zip\"\n        check_and_download(path, url)\n        self.summary_model = AutoModelForConditionalGeneration.from_pretrained(path)\n        self.summary_tokenizer = AutoTokenizer.from_pretrained(path)\n\n    def get_summary(self, sent : str, news_list:List[Tuple]) -&gt; Tuple[str, List[Tuple]]:\n\n        summary_list = []\n        for news in news_list:\n            text = news[2]\n            summary_text = self.single_infer(text)\n            summary_list.append((news[0], news[1], summary_text))\n\n        if len(sent) &gt; 20:\n            sent = self.single_infer(sent)\n        return sent, summary_list\n\n    def single_infer(self, text : str )-&gt;str:\n        # \u9488\u5bf9\u5355\u6761\u6587\u672c\uff0c\u751f\u6210\u6458\u8981\n        tokenized = self.summary_tokenizer(\n            text[:128], truncation=True, max_length=128, return_tensors=\"pd\"\n        )\n        preds, _ = self.summary_model.generate(\n            input_ids=tokenized[\"input_ids\"],\n            max_length=64,\n            min_length=0,\n            decode_strategy=\"beam_search\",\n            num_beams=4,\n        )\n        summary_ans = self.summary_tokenizer.decode(\n            preds[0], skip_special_tokens=True, clean_up_tokenization_spaces=False\n        )\n        return summary_ans\n</code></pre>"},{"location":"reference/summary/#api","title":"\u4f7f\u7528 \u767e\u5ea6API \u7684\u6982\u8ff0\u6a21\u578b","text":"<p>               Bases: <code>BaseSummaryModel</code></p> <p>\u6839\u636e\u767e\u5ea6API\u8fdb\u884c\u65b0\u95fb\u6982\u8981\u3002 \u9700\u8981\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6eBAIDU_API_KEY\u548cBAIDU_API_SECRET\u3002 \u5e73\u5747\u6d4b\u8bd5\u4e0b\u6765\u8d28\u91cf\u4e00\u822c\uff0c\u548c Pegasus \u5dee\u4e0d\u591a</p> Source code in <code>RumorDetect/modules/summary_module.py</code> <pre><code>class BaiduSummaryModel(BaseSummaryModel):\n    '''\n        \u6839\u636e\u767e\u5ea6API\u8fdb\u884c\u65b0\u95fb\u6982\u8981\u3002\n        \u9700\u8981\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6eBAIDU_API_KEY\u548cBAIDU_API_SECRET\u3002\n        \u5e73\u5747\u6d4b\u8bd5\u4e0b\u6765\u8d28\u91cf\u4e00\u822c\uff0c\u548c Pegasus \u5dee\u4e0d\u591a\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        url = \"https://aip.baidubce.com/oauth/2.0/token\"\n        params = {\n            \"grant_type\": \"client_credentials\",\n            \"client_id\": get_env(\"BAIDU_API_KEY\"),\n            \"client_secret\": get_env(\"BAIDU_API_SECRET\"),\n        }\n        self.token = str(requests.post(url, params=params).json().get(\"access_token\"))\n\n\n    def get_summary(self, sent : str, news_list:List[Tuple]) -&gt; Tuple[str, List[Tuple]]: \n        summary_list = []\n        for news in news_list:\n            text = news[2]\n            summary_text = self.single_infer(text)\n            summary_list.append((news[0], news[1], summary_text))\n\n        if len(sent) &gt; 20:\n            sent = self.single_infer(sent)\n\n        return sent, summary_list\n\n    def single_infer(self, text : str )-&gt;str:\n        url = \"https://aip.baidubce.com/rpc/2.0/nlp/v1/news_summary?charset=UTF-8&amp;access_token=\" + self.token\n        payload = json.dumps({\n            \"content\": text,\n            \"max_summary_len\": 50\n        })\n        headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n\n        response = requests.request(\"POST\", url, headers=headers, data=payload)\n        result = response.json()\n        if \"error_code\" in result:\n            print(f\"\u4f7f\u7528\u767e\u5ea6\u77ed\u6587\u672c\u6bd4\u8f83\u7684\u65f6\u5019\u51fa\u9519\uff1a{result}\")\n            return \n        return result[\"summary\"]\n</code></pre>"},{"location":"reference/summary/#erniebot","title":"\u4f7f\u7528\u767e\u5ea6\u5927\u6a21\u578bErnieBot\u8fdb\u884c\u6982\u8ff0","text":"<p>               Bases: <code>BaseSummaryModel</code></p> <p>\u6839\u636eErnieBot\u8fdb\u884c\u65b0\u95fb\u6982\u8981\u3002 \u9700\u8981\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6eERNIE_BOT_KEY\u548cERNIE_BOT_SECRET\u3002 \u7531\u4e8e\u4f7f\u7528\u5927\u8bed\u8a00\u6a21\u578b\uff0c\u8d28\u91cf\u8f83\u9ad8\u3002</p> Source code in <code>RumorDetect/modules/summary_module.py</code> <pre><code>class ErnieBotSummaryModel(BaseSummaryModel):\n    '''\n        \u6839\u636eErnieBot\u8fdb\u884c\u65b0\u95fb\u6982\u8981\u3002\n        \u9700\u8981\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6eERNIE_BOT_KEY\u548cERNIE_BOT_SECRET\u3002\n        \u7531\u4e8e\u4f7f\u7528\u5927\u8bed\u8a00\u6a21\u578b\uff0c\u8d28\u91cf\u8f83\u9ad8\u3002\n    '''\n    def __init__(self) -&gt; None:\n        self.init()\n\n    def init(self):\n        if module_tools.ernie_bot_token == \"\":\n            url = \"https://aip.baidubce.com/oauth/2.0/token\"\n            params = {\n                \"grant_type\": \"client_credentials\",\n                \"client_id\": get_env(\"ERNIE_BOT_KEY\"),\n                \"client_secret\": get_env(\"ERNIE_BOT_SECRET\"),\n            }\n\n            self.token = str(requests.post(url, params=params).json().get(\"access_token\"))\n            module_tools.ernie_bot_token = self.token\n        else:\n            self.token = module_tools.ernie_bot_token\n\n    def get_summary(self, sent : str, news_list:List[Tuple]) -&gt; Tuple[str, List[Tuple]]: \n        summary_list = []\n        for news in news_list:\n            text = news[2]\n            summary_text = self.single_infer(text)\n            summary_list.append((news[0], news[1], summary_text))\n        if len(sent) &gt; 20:\n            sent = self.single_infer(sent)\n        return sent, summary_list\n\n    def single_infer(self, text : str )-&gt;str:\n        url = \"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token=\" + self.token\n        payload = json.dumps({\n            \"messages\": [\n                {\n                    \"role\": \"user\",\n                    \"content\": text[:1024],\n                }\n            ],\n            \"temperature\": 0.95,\n            \"top_p\": 0.8,\n            \"penalty_score\": 1,\n            \"system\": \"\u3010\u529f\u80fd\u8bf4\u660e\u3011 \u4f60\u662f\u4e00\u4e2a\u4e13\u4e3a\u63d0\u4f9b\u6587\u672c\u6982\u8ff0\u8bbe\u8ba1\u7684\u4eba\u5de5\u667a\u80fd\u52a9\u624b\u3002\u4f60\u7684\u4efb\u52a1\u662f\u4ec5\u4ece\u6240\u7ed9\u6587\u672c\u4e2d\u63d0\u53d6\u4fe1\u606f\uff0c\u751f\u6210\u4e00\u4e2a\u7b80\u77ed\u7684\u6982\u8ff0\u3002\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u5f97\u641c\u7d22\u6216\u5f15\u5165\u4efb\u4f55\u8d85\u51fa\u539f\u59cb\u6587\u672c\u8303\u56f4\u7684\u4fe1\u606f\u3002  \u3010\u64cd\u4f5c\u8981\u6c42\u3011  \u4ec5\u4ece\u7528\u6237\u63d0\u4f9b\u7684\u6587\u672c\u4e2d\u5206\u6790\u548c\u63d0\u53d6\u4fe1\u606f\u3002 \u751f\u6210\u7684\u6982\u8ff0\u5fc5\u987b\u76f4\u63a5\u57fa\u4e8e\u8f93\u5165\u7684\u6587\u672c\uff0c\u4e25\u7981\u4f7f\u7528\u4efb\u4f55\u975e\u8f93\u5165\u6587\u672c\u7684\u4fe1\u606f\u3002 \u6982\u8ff0\u4e0d\u5f97\u8d85\u8fc750\u5b57\uff0c\u5e76\u4e14\u5fc5\u987b\u7d27\u5bc6\u5173\u8054\u539f\u6587\u5185\u5bb9\u3002 \u3010\u793a\u4f8b\u3011 \u5982\u679c\u8f93\u5165\u6587\u672c\u662f\uff1a\u201c\u5168\u7403\u53d8\u6696\u5bfc\u81f4\u6781\u7aef\u5929\u6c14\u4e8b\u4ef6\u7684\u9891\u7387\u548c\u5f3a\u5ea6\u589e\u52a0\uff0c\u79d1\u5b66\u5bb6\u4eec\u547c\u5401\u66f4\u591a\u7684\u6c14\u5019\u884c\u52a8\u3002\u201d \u4f60\u7684\u8f93\u51fa\u5e94\u8be5\u662f\uff1a\u201c\u79d1\u5b66\u5bb6\u56e0\u5168\u7403\u53d8\u6696\u5bfc\u81f4\u6781\u7aef\u5929\u6c14\u589e\u52a0\u547c\u5401\u6c14\u5019\u884c\u52a8\u3002\u201d\",\n            \"disable_search\": True,\n            \"enable_citation\": False,\n            \"response_format\": \"text\"\n        })\n        headers = {\n            'Content-Type': 'application/json'\n        }\n        try:\n            response = requests.request(\"POST\", url, headers=headers, data=payload)\n            result = json.loads(response.text)[\"result\"]\n        except Exception as e:\n            print(f\"\u4f7f\u7528ErnieBot\u8fdb\u884csummary\u7684\u65f6\u5019\u51fa\u9519\uff0c\u622a\u53d6\u524d50\u4e2a\u5b57\u7b26\uff1a{e}\")\n            return text[:50]\n        return result\n</code></pre>"},{"location":"tutorial/tutorial/","title":"Tutorial","text":""},{"location":"tutorial/tutorial/#apitoken","title":"\u53ef\u80fd\u9700\u8981\u914d\u7f6e\u7684\u73af\u5883\u53d8\u91cf\uff08\u5404\u79cdAPI\u7684token","text":""},{"location":"tutorial/tutorial/#_1","title":"\u65b0\u95fb\u641c\u7d22","text":"<ul> <li><code>TJSX_API_KEY</code> </li> <li><code>CSE_ID</code> \u548c <code>CSE_API_KEY</code> </li> <li><code>BING_SEARCH_KEY</code> </li> <li><code>URL2IO_KEY</code> </li> </ul>"},{"location":"tutorial/tutorial/#summary-and-compare","title":"summary and compare","text":"<ul> <li><code>BAIDU_API_KEY</code> \u548c <code>BAIDU_API_SECRET</code> </li> <li><code>ERNIE_BOT_KEY</code> \u548c <code>ERNIE_BOT_SECRET</code> </li> </ul>"},{"location":"tutorial/tutorial/#judge","title":"judge","text":"<ul> <li><code>ERNIE_BOT_KEY</code> \u548c <code>ERNIE_BOT_SECRET</code> </li> </ul>"},{"location":"tutorial/tutorial/#example","title":"Example","text":"<pre><code>from RumorDetect.RumorDetect import rumor_detect\n\ninstance = rumor_detect(\n    news_mode=[\"google\"],\n    summary_mode=[\"ernie_bot\"],\n    compare_mode=[\"ernie_bot\", \"match\"],\n    judge_mode=[\"cnn\", \"ernie_bot\"],\n)\nsent = \"\u8fd9\u662f\u8c23\u8a00\u5417\"\ninstance.run(sent)\n</code></pre>"},{"location":"tutorial/tutorial/#debug-example","title":"Debug Example","text":"<pre><code>from RumorDetect.RumorDetect import rumor_detect\n\ninstance = rumor_detect(\n    news_mode=[\"google\"],\n    summary_mode=[\"ernie_bot\"],\n    compare_mode=[\"ernie_bot\", \"match\"],\n    judge_mode=[\"cnn\", \"ernie_bot\"],\n)\nsent = \"\u8fd9\u662f\u8c23\u8a00\u5417\"\ntmp = instance.debug_run(sent)\nnext(tmp)\nprint(instance.get_intermediate())\ninstance.update_params({\"sent\": \"\u8fd9\u662f\u8c23\u8a00\u5417\", \"keywords\": [\"\u8fd9\u662f\u8c23\u8a00\u5417\"]})\nprint(instance.get_intermediate())\ninstance.set\nnext(tmp)\nprint(instance.get_intermediate())\nnext(tmp)\nprint(instance.get_intermediate())\nnext(tmp)\n</code></pre>"},{"location":"tutorial/tutorial/#example_1","title":"\u4fee\u6539\u81ea\u5df1\u6a21\u5757\u7684 Example","text":"<pre><code>from RumorDetect.RumorDetect import rumor_detect\n\nfrom RumorDetect.model import BaseSummaryModel\n\n\nclass test(BaseSummaryModel):\n    def init(self):\n        pass\n\n    def get_summary(self, sent: str, news_list: list) -&gt; tuple:\n        return \"\u6ca1\u9519\", [(\"\u9519\u4e86\", \"http://www.baidu.com\", \"\u9519\u4e86\")]\n\n\ninstance = rumor_detect(\n    news_mode=[\"bing\"],\n    compare_mode=[\"entailment\", \"ernie_bot\"],\n    judge_mode=[\"cnn\", \"ernie_bot\"],\n    auto_init=False,\n)\ninstance.add_summary_mode(\"test\", test)\ninstance.set_summary_mode([\"test\"])\nsent = \"\u9694\u591c\u897f\u74dc\u4e0d\u80fd\u5403\uff0c\u4f1a\u4e2d\u6bd2\"\ninstance.run(sent)\n</code></pre>"}]}